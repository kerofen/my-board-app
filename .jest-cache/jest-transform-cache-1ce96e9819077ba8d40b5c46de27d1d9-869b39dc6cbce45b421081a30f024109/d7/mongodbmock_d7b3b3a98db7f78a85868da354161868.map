{"version":3,"names":["cov_2inxvfiac0","actualCoverage","s","mockDb","f","mockPosts","_id","title","author","content","createdAt","Date","toISOString","updatedAt","inMemoryPosts","nextId","find","sort","a","b","getTime","create","data","newPost","String","push","findById","id","p","findByIdAndUpdate","index","findIndex","findByIdAndDelete","deleted","filter"],"sources":["C:\\Users\\janne\\Documents\\workspace\\my-board-app\\lib\\mongodb-mock.ts"],"sourcesContent":["// MongoDBが利用できない場合のモックデータ\nexport const mockPosts = [\n  {\n    _id: '1',\n    title: 'サンプル投稿',\n    author: 'テストユーザー',\n    content: 'これはMongoDBが接続できない場合のサンプル投稿です。',\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  }\n];\n\nlet inMemoryPosts = [...mockPosts];\nlet nextId = 2;\n\nexport const mockDb = {\n  async find() {\n    return inMemoryPosts.sort((a, b) => \n      new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n    );\n  },\n  \n  async create(data: { title: string; author: string; content: string }) {\n    const newPost = {\n      _id: String(nextId++),\n      ...data,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n    inMemoryPosts.push(newPost);\n    return newPost;\n  },\n  \n  async findById(id: string) {\n    return inMemoryPosts.find(p => p._id === id);\n  },\n  \n  async findByIdAndUpdate(id: string, data: { title?: string; author?: string; content?: string }) {\n    const index = inMemoryPosts.findIndex(p => p._id === id);\n    if (index === -1) return null;\n    \n    inMemoryPosts[index] = {\n      ...inMemoryPosts[index],\n      ...data,\n      updatedAt: new Date().toISOString(),\n    };\n    return inMemoryPosts[index];\n  },\n  \n  async findByIdAndDelete(id: string) {\n    const index = inMemoryPosts.findIndex(p => p._id === id);\n    if (index === -1) return null;\n    \n    const deleted = inMemoryPosts[index];\n    inMemoryPosts = inMemoryPosts.filter(p => p._id !== id);\n    return deleted;\n  }\n};"],"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","ignoreList":[]}
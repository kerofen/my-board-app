{"version":3,"sources":["C:\\Users\\janne\\Documents\\workspace\\my-board-app\\__tests__\\api\\posts\\[id]\\route.test.ts"],"sourcesContent":["import { GET, PUT, DELETE } from '@/app/api/posts/[id]/route';\nimport { NextRequest } from 'next/server';\nimport clientPromise from '@/lib/mongodb';\nimport { ObjectId } from 'mongodb';\n\njest.mock('@/lib/mongodb', () => ({\n  __esModule: true,\n  default: Promise.resolve({\n    db: jest.fn().mockReturnValue({\n      collection: jest.fn().mockReturnValue({\n        findOne: jest.fn(),\n        findOneAndUpdate: jest.fn(),\n        deleteOne: jest.fn(),\n      }),\n    }),\n  }),\n}));\n\njest.mock('mongodb', () => ({\n  ObjectId: jest.fn((id) => id),\n}));\n\ndescribe('/api/posts/[id]', () => {\n  let mockCollection: any;\n  const mockId = '507f1f77bcf86cd799439011';\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockCollection = {\n      findOne: jest.fn(),\n      findOneAndUpdate: jest.fn(),\n      deleteOne: jest.fn(),\n    };\n\n    (clientPromise as any).then((client: any) => {\n      client.db().collection.mockReturnValue(mockCollection);\n    });\n  });\n\n  describe('GET /api/posts/[id]', () => {\n    it('指定IDの投稿を取得できる', async () => {\n      const mockPost = {\n        _id: mockId,\n        title: 'テスト投稿',\n        author: '作成者',\n        content: 'テスト内容',\n        createdAt: new Date('2024-01-01'),\n        updatedAt: new Date('2024-01-01'),\n      };\n\n      mockCollection.findOne.mockResolvedValue(mockPost);\n\n      const response = await GET(\n        new NextRequest('http://localhost:3000/api/posts/' + mockId),\n        { params: { id: mockId } }\n      );\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data).toEqual(mockPost);\n      expect(mockCollection.findOne).toHaveBeenCalledWith({ _id: mockId });\n    });\n\n    it('存在しないIDの場合は404を返す', async () => {\n      mockCollection.findOne.mockResolvedValue(null);\n\n      const response = await GET(\n        new NextRequest('http://localhost:3000/api/posts/' + mockId),\n        { params: { id: mockId } }\n      );\n      const data = await response.json();\n\n      expect(response.status).toBe(404);\n      expect(data.error).toBe('投稿が見つかりません');\n    });\n\n    it('無効なIDの場合は400を返す', async () => {\n      const invalidId = 'invalid-id';\n\n      const response = await GET(\n        new NextRequest('http://localhost:3000/api/posts/' + invalidId),\n        { params: { id: invalidId } }\n      );\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error).toBe('無効なIDです');\n    });\n  });\n\n  describe('PUT /api/posts/[id]', () => {\n    it('投稿を更新できる', async () => {\n      const updateData = {\n        title: '更新後のタイトル',\n        author: '更新後の作成者',\n        content: '更新後の内容',\n      };\n\n      const updatedPost = {\n        _id: mockId,\n        ...updateData,\n        createdAt: new Date('2024-01-01'),\n        updatedAt: new Date(),\n      };\n\n      mockCollection.findOneAndUpdate.mockResolvedValue({\n        value: updatedPost,\n      });\n\n      const request = new NextRequest('http://localhost:3000/api/posts/' + mockId, {\n        method: 'PUT',\n        body: JSON.stringify(updateData),\n      });\n\n      const response = await PUT(request, { params: { id: mockId } });\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data).toEqual(updatedPost);\n      expect(mockCollection.findOneAndUpdate).toHaveBeenCalledWith(\n        { _id: mockId },\n        {\n          $set: {\n            ...updateData,\n            updatedAt: expect.any(Date),\n          },\n        },\n        { returnDocument: 'after' }\n      );\n    });\n\n    it('存在しないIDの更新は404を返す', async () => {\n      mockCollection.findOneAndUpdate.mockResolvedValue({ value: null });\n\n      const request = new NextRequest('http://localhost:3000/api/posts/' + mockId, {\n        method: 'PUT',\n        body: JSON.stringify({\n          title: '更新タイトル',\n          author: '更新作成者',\n          content: '更新内容',\n        }),\n      });\n\n      const response = await PUT(request, { params: { id: mockId } });\n      const data = await response.json();\n\n      expect(response.status).toBe(404);\n      expect(data.error).toBe('投稿が見つかりません');\n    });\n\n    it('文字数制限を超えた更新は400を返す', async () => {\n      const invalidUpdate = {\n        title: 'a'.repeat(101),\n        author: '作成者',\n        content: '内容',\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/posts/' + mockId, {\n        method: 'PUT',\n        body: JSON.stringify(invalidUpdate),\n      });\n\n      const response = await PUT(request, { params: { id: mockId } });\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error).toBe('入力値が無効です');\n    });\n  });\n\n  describe('DELETE /api/posts/[id]', () => {\n    it('投稿を削除できる', async () => {\n      mockCollection.deleteOne.mockResolvedValue({\n        deletedCount: 1,\n      });\n\n      const response = await DELETE(\n        new NextRequest('http://localhost:3000/api/posts/' + mockId),\n        { params: { id: mockId } }\n      );\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.message).toBe('投稿を削除しました');\n      expect(mockCollection.deleteOne).toHaveBeenCalledWith({ _id: mockId });\n    });\n\n    it('存在しないIDの削除は404を返す', async () => {\n      mockCollection.deleteOne.mockResolvedValue({\n        deletedCount: 0,\n      });\n\n      const response = await DELETE(\n        new NextRequest('http://localhost:3000/api/posts/' + mockId),\n        { params: { id: mockId } }\n      );\n      const data = await response.json();\n\n      expect(response.status).toBe(404);\n      expect(data.error).toBe('投稿が見つかりません');\n    });\n  });\n});"],"names":["jest","mock","__esModule","default","Promise","resolve","db","fn","mockReturnValue","collection","findOne","findOneAndUpdate","deleteOne","ObjectId","id","describe","mockCollection","mockId","beforeEach","clearAllMocks","clientPromise","then","client","it","mockPost","_id","title","author","content","createdAt","Date","updatedAt","mockResolvedValue","response","GET","NextRequest","params","data","json","expect","status","toBe","toEqual","toHaveBeenCalledWith","error","invalidId","updateData","updatedPost","value","request","method","body","JSON","stringify","PUT","$set","any","returnDocument","invalidUpdate","repeat","deletedCount","DELETE","message"],"mappings":"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"}
{"version":3,"sources":["C:\\Users\\janne\\Documents\\workspace\\my-board-app\\__tests__\\components\\PostItem.test.tsx"],"sourcesContent":["import { render, screen, fireEvent, waitFor } from '@testing-library/react'\nimport PostItem from '@/components/PostItem'\nimport { Post } from '@/app/page'\n\n// fetchのモック\nglobal.fetch = jest.fn()\n\n// confirmのモック\nglobal.confirm = jest.fn()\n\ndescribe('PostItem', () => {\n  const mockPost: Post = {\n    _id: '1',\n    title: 'テストタイトル',\n    author: 'テスト投稿者',\n    content: 'テスト内容',\n    createdAt: '2025-01-01T00:00:00.000Z',\n    updatedAt: '2025-01-01T00:00:00.000Z',\n  }\n\n  const mockOnDeleted = jest.fn()\n\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  it('投稿が正しく表示される', () => {\n    render(<PostItem post={mockPost} onDeleted={mockOnDeleted} />)\n    \n    expect(screen.getByText('テストタイトル')).toBeInTheDocument()\n    expect(screen.getByText('投稿者: テスト投稿者')).toBeInTheDocument()\n    expect(screen.getByText('テスト内容')).toBeInTheDocument()\n    expect(screen.getByRole('button', { name: '編集' })).toBeInTheDocument()\n    expect(screen.getByRole('button', { name: '削除' })).toBeInTheDocument()\n  })\n\n  it('長い内容は省略表示される', () => {\n    const longPost = {\n      ...mockPost,\n      content: 'あ'.repeat(201),\n    }\n    \n    render(<PostItem post={longPost} onDeleted={mockOnDeleted} />)\n    \n    expect(screen.getByText('あ'.repeat(200) + '...')).toBeInTheDocument()\n    expect(screen.getByText('続きを読む')).toBeInTheDocument()\n  })\n\n  it('続きを読むクリックで全文表示される', () => {\n    const longPost = {\n      ...mockPost,\n      content: 'あ'.repeat(201),\n    }\n    \n    render(<PostItem post={longPost} onDeleted={mockOnDeleted} />)\n    \n    const expandButton = screen.getByText('続きを読む')\n    fireEvent.click(expandButton)\n    \n    expect(screen.getByText('あ'.repeat(201))).toBeInTheDocument()\n    expect(screen.getByText('折りたたむ')).toBeInTheDocument()\n  })\n\n  it('編集ボタンクリックで編集フォームが表示される', () => {\n    render(<PostItem post={mockPost} onDeleted={mockOnDeleted} />)\n    \n    const editButton = screen.getByRole('button', { name: '編集' })\n    fireEvent.click(editButton)\n    \n    expect(screen.getByText('投稿を編集')).toBeInTheDocument()\n    expect(screen.getByRole('button', { name: '保存' })).toBeInTheDocument()\n    expect(screen.getByRole('button', { name: 'キャンセル' })).toBeInTheDocument()\n  })\n\n  it('削除確認でキャンセルすると削除されない', () => {\n    (confirm as jest.Mock).mockReturnValue(false)\n    \n    render(<PostItem post={mockPost} onDeleted={mockOnDeleted} />)\n    \n    const deleteButton = screen.getByRole('button', { name: '削除' })\n    fireEvent.click(deleteButton)\n    \n    expect(confirm).toHaveBeenCalledWith('本当に削除しますか？')\n    expect(fetch).not.toHaveBeenCalled()\n    expect(mockOnDeleted).not.toHaveBeenCalled()\n  })\n\n  it('削除確認でOKすると削除される', async () => {\n    (confirm as jest.Mock).mockReturnValue(true)\n    ;(fetch as jest.Mock).mockResolvedValueOnce({\n      json: async () => ({ success: true }),\n    })\n    \n    render(<PostItem post={mockPost} onDeleted={mockOnDeleted} />)\n    \n    const deleteButton = screen.getByRole('button', { name: '削除' })\n    fireEvent.click(deleteButton)\n    \n    expect(confirm).toHaveBeenCalledWith('本当に削除しますか？')\n    \n    await waitFor(() => {\n      expect(fetch).toHaveBeenCalledWith('/api/posts/1', {\n        method: 'DELETE',\n      })\n    })\n    \n    await waitFor(() => {\n      expect(mockOnDeleted).toHaveBeenCalled()\n    })\n  })\n\n  it('削除エラー時にアラートが表示される', async () => {\n    const alertSpy = jest.spyOn(window, 'alert').mockImplementation()\n    ;(confirm as jest.Mock).mockReturnValue(true)\n    ;(fetch as jest.Mock).mockResolvedValueOnce({\n      json: async () => ({ success: false }),\n    })\n    \n    render(<PostItem post={mockPost} onDeleted={mockOnDeleted} />)\n    \n    const deleteButton = screen.getByRole('button', { name: '削除' })\n    fireEvent.click(deleteButton)\n    \n    await waitFor(() => {\n      expect(alertSpy).toHaveBeenCalledWith('削除に失敗しました')\n    })\n    \n    expect(mockOnDeleted).not.toHaveBeenCalled()\n    \n    alertSpy.mockRestore()\n  })\n\n  it('日付が表示される', () => {\n    render(<PostItem post={mockPost} onDeleted={mockOnDeleted} />)\n    \n    // 日付フォーマットのテスト（実際の表示形式に依存）\n    const dateElement = screen.getByText(/2025\\/1\\/1/)\n    expect(dateElement).toBeInTheDocument()\n  })\n})"],"names":["global","fetch","jest","fn","confirm","describe","mockPost","_id","title","author","content","createdAt","updatedAt","mockOnDeleted","beforeEach","clearAllMocks","it","render","PostItem","post","onDeleted","expect","screen","getByText","toBeInTheDocument","getByRole","name","longPost","repeat","expandButton","fireEvent","click","editButton","mockReturnValue","deleteButton","toHaveBeenCalledWith","not","toHaveBeenCalled","mockResolvedValueOnce","json","success","waitFor","method","alertSpy","spyOn","window","mockImplementation","mockRestore","dateElement"],"mappings":"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"}
861462be79d7bc1636462bda328b003d
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _PostItem = /*#__PURE__*/ _interop_require_default(require("../../components/PostItem"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// fetchのモック
global.fetch = jest.fn();
// confirmのモック
global.confirm = jest.fn();
describe('PostItem', ()=>{
    const mockPost = {
        _id: '1',
        title: 'テストタイトル',
        author: 'テスト投稿者',
        content: 'テスト内容',
        createdAt: '2025-01-01T00:00:00.000Z',
        updatedAt: '2025-01-01T00:00:00.000Z'
    };
    const mockOnDeleted = jest.fn();
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    it('投稿が正しく表示される', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PostItem.default, {
            post: mockPost,
            onDeleted: mockOnDeleted
        }));
        expect(_react.screen.getByText('テストタイトル')).toBeInTheDocument();
        expect(_react.screen.getByText('投稿者: テスト投稿者')).toBeInTheDocument();
        expect(_react.screen.getByText('テスト内容')).toBeInTheDocument();
        expect(_react.screen.getByRole('button', {
            name: '編集'
        })).toBeInTheDocument();
        expect(_react.screen.getByRole('button', {
            name: '削除'
        })).toBeInTheDocument();
    });
    it('長い内容は省略表示される', ()=>{
        const longPost = {
            ...mockPost,
            content: 'あ'.repeat(201)
        };
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PostItem.default, {
            post: longPost,
            onDeleted: mockOnDeleted
        }));
        expect(_react.screen.getByText('あ'.repeat(200) + '...')).toBeInTheDocument();
        expect(_react.screen.getByText('続きを読む')).toBeInTheDocument();
    });
    it('続きを読むクリックで全文表示される', ()=>{
        const longPost = {
            ...mockPost,
            content: 'あ'.repeat(201)
        };
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PostItem.default, {
            post: longPost,
            onDeleted: mockOnDeleted
        }));
        const expandButton = _react.screen.getByText('続きを読む');
        _react.fireEvent.click(expandButton);
        expect(_react.screen.getByText('あ'.repeat(201))).toBeInTheDocument();
        expect(_react.screen.getByText('折りたたむ')).toBeInTheDocument();
    });
    it('編集ボタンクリックで編集フォームが表示される', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PostItem.default, {
            post: mockPost,
            onDeleted: mockOnDeleted
        }));
        const editButton = _react.screen.getByRole('button', {
            name: '編集'
        });
        _react.fireEvent.click(editButton);
        expect(_react.screen.getByText('投稿を編集')).toBeInTheDocument();
        expect(_react.screen.getByRole('button', {
            name: '保存'
        })).toBeInTheDocument();
        expect(_react.screen.getByRole('button', {
            name: 'キャンセル'
        })).toBeInTheDocument();
    });
    it('削除確認でキャンセルすると削除されない', ()=>{
        confirm.mockReturnValue(false);
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PostItem.default, {
            post: mockPost,
            onDeleted: mockOnDeleted
        }));
        const deleteButton = _react.screen.getByRole('button', {
            name: '削除'
        });
        _react.fireEvent.click(deleteButton);
        expect(confirm).toHaveBeenCalledWith('本当に削除しますか？');
        expect(fetch).not.toHaveBeenCalled();
        expect(mockOnDeleted).not.toHaveBeenCalled();
    });
    it('削除確認でOKすると削除される', async ()=>{
        confirm.mockReturnValue(true);
        fetch.mockResolvedValueOnce({
            json: async ()=>({
                    success: true
                })
        });
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PostItem.default, {
            post: mockPost,
            onDeleted: mockOnDeleted
        }));
        const deleteButton = _react.screen.getByRole('button', {
            name: '削除'
        });
        _react.fireEvent.click(deleteButton);
        expect(confirm).toHaveBeenCalledWith('本当に削除しますか？');
        await (0, _react.waitFor)(()=>{
            expect(fetch).toHaveBeenCalledWith('/api/posts/1', {
                method: 'DELETE'
            });
        });
        await (0, _react.waitFor)(()=>{
            expect(mockOnDeleted).toHaveBeenCalled();
        });
    });
    it('削除エラー時にアラートが表示される', async ()=>{
        const alertSpy = jest.spyOn(window, 'alert').mockImplementation();
        confirm.mockReturnValue(true);
        fetch.mockResolvedValueOnce({
            json: async ()=>({
                    success: false
                })
        });
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PostItem.default, {
            post: mockPost,
            onDeleted: mockOnDeleted
        }));
        const deleteButton = _react.screen.getByRole('button', {
            name: '削除'
        });
        _react.fireEvent.click(deleteButton);
        await (0, _react.waitFor)(()=>{
            expect(alertSpy).toHaveBeenCalledWith('削除に失敗しました');
        });
        expect(mockOnDeleted).not.toHaveBeenCalled();
        alertSpy.mockRestore();
    });
    it('日付が表示される', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PostItem.default, {
            post: mockPost,
            onDeleted: mockOnDeleted
        }));
        // 日付フォーマットのテスト（実際の表示形式に依存）
        const dateElement = _react.screen.getByText(/2025\/1\/1/);
        expect(dateElement).toBeInTheDocument();
    });
});

//# sourceMappingURL=data:application/json;base64,
{"version":3,"sources":["C:\\Users\\janne\\Documents\\workspace\\my-board-app\\__tests__\\api\\posts\\route.test.ts"],"sourcesContent":["/**\n * @jest-environment node\n */\nimport { GET, POST } from '@/app/api/posts/route';\nimport { NextRequest } from 'next/server';\n\n// NextRequestのモック\njest.mock('next/server', () => ({\n  NextRequest: jest.fn(),\n  NextResponse: {\n    json: jest.fn((data, init) => ({\n      json: async () => data,\n      status: init?.status || 200,\n    })),\n  },\n}));\n\n// MongoDBモックデータベース\nconst mockDb = {\n  posts: [] as any[],\n  find: jest.fn(),\n  insertOne: jest.fn(),\n};\n\njest.mock('@/lib/mongodb-mock', () => ({\n  __esModule: true,\n  default: mockDb,\n}));\n\n// clientPromiseのモック\njest.mock('@/lib/mongodb', () => ({\n  __esModule: true,\n  default: Promise.reject(new Error('MongoDB not available')),\n}));\n\ndescribe('/api/posts', () => {\n  let mockCollection: any;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockCollection = {\n      find: jest.fn().mockReturnValue({\n        sort: jest.fn().mockReturnValue({\n          toArray: jest.fn(),\n        }),\n      }),\n      insertOne: jest.fn(),\n    };\n\n    (clientPromise as any).then((client: any) => {\n      client.db().collection.mockReturnValue(mockCollection);\n    });\n  });\n\n  describe('GET /api/posts', () => {\n    it('投稿一覧を取得できる', async () => {\n      const mockPosts = [\n        {\n          _id: '1',\n          title: 'テスト投稿1',\n          author: '作成者1',\n          content: 'テスト内容1',\n          createdAt: new Date('2024-01-01'),\n          updatedAt: new Date('2024-01-01'),\n        },\n        {\n          _id: '2',\n          title: 'テスト投稿2',\n          author: '作成者2',\n          content: 'テスト内容2',\n          createdAt: new Date('2024-01-02'),\n          updatedAt: new Date('2024-01-02'),\n        },\n      ];\n\n      mockCollection.find().sort().toArray.mockResolvedValue(mockPosts);\n\n      const response = await GET();\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data).toEqual(mockPosts);\n      expect(mockCollection.find).toHaveBeenCalledWith({});\n      expect(mockCollection.find().sort).toHaveBeenCalledWith({ createdAt: -1 });\n    });\n\n    it('エラー時は500を返す', async () => {\n      mockCollection.find.mockImplementation(() => {\n        throw new Error('Database error');\n      });\n\n      const response = await GET();\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error).toBe('投稿の取得に失敗しました');\n    });\n  });\n\n  describe('POST /api/posts', () => {\n    it('新規投稿を作成できる', async () => {\n      const newPost = {\n        title: '新規投稿',\n        author: '新規作成者',\n        content: '新規内容',\n      };\n\n      const mockInsertedPost = {\n        _id: '123',\n        ...newPost,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      mockCollection.insertOne.mockResolvedValue({\n        insertedId: '123',\n        acknowledged: true,\n      });\n\n      const request = new NextRequest('http://localhost:3000/api/posts', {\n        method: 'POST',\n        body: JSON.stringify(newPost),\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(201);\n      expect(mockCollection.insertOne).toHaveBeenCalledWith(\n        expect.objectContaining({\n          title: newPost.title,\n          author: newPost.author,\n          content: newPost.content,\n        })\n      );\n    });\n\n    it('必須フィールドが不足している場合は400を返す', async () => {\n      const invalidPost = {\n        title: '新規投稿',\n        // authorとcontentが不足\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/posts', {\n        method: 'POST',\n        body: JSON.stringify(invalidPost),\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error).toBe('必須フィールドが不足しています');\n    });\n\n    it('文字数制限を超えた場合は400を返す', async () => {\n      const invalidPost = {\n        title: 'a'.repeat(101), // 100文字制限を超過\n        author: '作成者',\n        content: '内容',\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/posts', {\n        method: 'POST',\n        body: JSON.stringify(invalidPost),\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error).toBe('入力値が無効です');\n    });\n  });\n});"],"names":["jest","mock","NextRequest","fn","NextResponse","json","data","init","status","__esModule","default","mockDb","Promise","reject","Error","posts","find","insertOne","describe","mockCollection","beforeEach","clearAllMocks","mockReturnValue","sort","toArray","clientPromise","then","client","db","collection","it","mockPosts","_id","title","author","content","createdAt","Date","updatedAt","mockResolvedValue","response","GET","expect","toBe","toEqual","toHaveBeenCalledWith","mockImplementation","error","newPost","mockInsertedPost","insertedId","acknowledged","request","method","body","JSON","stringify","POST","objectContaining","invalidPost","repeat"],"mappings":"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"}
{"version":3,"names":["GET","cov_12g0bp8t5a","f","s","POST","useMock","_mongodb","default","posts","_Post","find","sort","createdAt","_server","NextResponse","json","success","data","mock","dbError","console","warn","b","_mongodbmock","mockDb","warning","error","details","process","env","NODE_ENV","message","undefined","status","request","body","title","author","content","post","create"],"sources":["C:\\Users\\janne\\Documents\\workspace\\my-board-app\\app\\api\\posts\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport dbConnect from '@/lib/mongodb';\nimport Post from '@/models/Post';\nimport { mockDb } from '@/lib/mongodb-mock';\n\nexport async function GET() {\n  let useMock = false;\n  \n  try {\n    // MongoDBへの接続を試みる\n    try {\n      await dbConnect();\n      const posts = await Post.find({}).sort({ createdAt: -1 });\n      return NextResponse.json({ success: true, data: posts, mock: false });\n    } catch (dbError) {\n      console.warn('MongoDB接続失敗、モックデータを使用:', dbError);\n      useMock = true;\n    }\n    \n    // モックデータを使用\n    if (useMock) {\n      const posts = await mockDb.find();\n      return NextResponse.json({ \n        success: true, \n        data: posts, \n        mock: true,\n        warning: 'MongoDBに接続できないため、一時的なメモリ内データを使用しています' \n      });\n    }\n  } catch (error) {\n    console.error('GET /api/posts エラー:', error);\n    return NextResponse.json(\n      { \n        success: false, \n        error: 'データベース接続エラー。MongoDBが起動しているか確認してください。',\n        details: process.env.NODE_ENV === 'development' ? (error as Error).message : undefined\n      },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  let useMock = false;\n  \n  try {\n    const body = await request.json();\n    \n    // 入力検証\n    if (!body.title || !body.author || !body.content) {\n      return NextResponse.json(\n        { success: false, error: 'タイトル、投稿者名、内容は必須です' },\n        { status: 400 }\n      );\n    }\n    \n    // MongoDBへの接続を試みる\n    try {\n      await dbConnect();\n      const post = await Post.create(body);\n      return NextResponse.json(\n        { success: true, data: post, mock: false },\n        { status: 201 }\n      );\n    } catch (dbError) {\n      console.warn('MongoDB接続失敗、モックデータを使用:', dbError);\n      useMock = true;\n    }\n    \n    // モックデータを使用\n    if (useMock) {\n      const post = await mockDb.create(body);\n      return NextResponse.json(\n        { \n          success: true, \n          data: post, \n          mock: true,\n          warning: 'MongoDBに接続できないため、データは一時的にメモリに保存されます'\n        },\n        { status: 201 }\n      );\n    }\n  } catch (error) {\n    console.error('POST /api/posts エラー:', error);\n    return NextResponse.json(\n      { \n        success: false, \n        error: '投稿の作成に失敗しました',\n        details: process.env.NODE_ENV === 'development' ? (error as Error).message : undefined\n      },\n      { status: 500 }\n    );\n  }\n}"],"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","ignoreList":[]}
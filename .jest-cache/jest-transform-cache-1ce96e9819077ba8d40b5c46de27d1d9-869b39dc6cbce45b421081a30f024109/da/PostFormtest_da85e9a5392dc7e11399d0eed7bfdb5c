c78b0718916c107f32bceba49a444a7f
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _PostForm = /*#__PURE__*/ _interop_require_default(require("../../components/PostForm"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// fetchのモック
global.fetch = jest.fn();
describe('PostForm', ()=>{
    const mockOnPostCreated = jest.fn();
    beforeEach(()=>{
        jest.clearAllMocks();
        // fetchのモックをリセット
        global.fetch.mockClear();
    });
    afterEach(()=>{
        jest.restoreAllMocks();
    });
    describe('レンダリング', ()=>{
        it('フォームが正しくレンダリングされる', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PostForm.default, {
                onPostCreated: mockOnPostCreated
            }));
            expect(_react1.screen.getByLabelText('タイトル')).toBeInTheDocument();
            expect(_react1.screen.getByLabelText('投稿者名')).toBeInTheDocument();
            expect(_react1.screen.getByLabelText(/内容/)).toBeInTheDocument();
            expect(_react1.screen.getByRole('button', {
                name: '投稿する'
            })).toBeInTheDocument();
            expect(_react1.screen.getByPlaceholderText('140文字以内で入力してください')).toBeInTheDocument();
        });
        it('初期状態では投稿ボタンが無効化されている', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PostForm.default, {
                onPostCreated: mockOnPostCreated
            }));
            const submitButton = _react1.screen.getByRole('button', {
                name: '投稿する'
            });
            expect(submitButton).toBeDisabled();
        });
    });
    describe('入力フィールドの動作', ()=>{
        it('各フィールドに入力できる', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PostForm.default, {
                onPostCreated: mockOnPostCreated
            }));
            const titleInput = _react1.screen.getByLabelText('タイトル');
            const authorInput = _react1.screen.getByLabelText('投稿者名');
            const contentInput = _react1.screen.getByLabelText(/内容/);
            await user.type(titleInput, 'テストタイトル');
            await user.type(authorInput, 'テスト投稿者');
            await user.type(contentInput, 'テスト内容');
            expect(titleInput).toHaveValue('テストタイトル');
            expect(authorInput).toHaveValue('テスト投稿者');
            expect(contentInput).toHaveValue('テスト内容');
        });
        it('文字数制限が正しく設定されている', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PostForm.default, {
                onPostCreated: mockOnPostCreated
            }));
            const titleInput = _react1.screen.getByLabelText('タイトル');
            const authorInput = _react1.screen.getByLabelText('投稿者名');
            const contentInput = _react1.screen.getByLabelText(/内容/);
            expect(titleInput.maxLength).toBe(100);
            expect(authorInput.maxLength).toBe(50);
            expect(contentInput.maxLength).toBe(140);
        });
        it('文字数カウンターが正しく表示される', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PostForm.default, {
                onPostCreated: mockOnPostCreated
            }));
            const contentInput = _react1.screen.getByLabelText(/内容/);
            await user.type(contentInput, 'テスト');
            expect(_react1.screen.getByText('(3/140)')).toBeInTheDocument();
            await user.clear(contentInput);
            await user.type(contentInput, 'a'.repeat(140));
            expect(_react1.screen.getByText('(140/140)')).toBeInTheDocument();
        });
        it('140文字を超えると赤色で表示される', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PostForm.default, {
                onPostCreated: mockOnPostCreated
            }));
            const contentInput = _react1.screen.getByLabelText(/内容/);
            // maxLength=140なので実際には140文字までしか入力できない
            await user.type(contentInput, 'a'.repeat(140));
            const counter = _react1.screen.getByText('(140/140)');
            expect(counter).toHaveClass('text-gray-500');
        });
        it('全フィールドに入力すると投稿ボタンが有効になる', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PostForm.default, {
                onPostCreated: mockOnPostCreated
            }));
            const submitButton = _react1.screen.getByRole('button', {
                name: '投稿する'
            });
            expect(submitButton).toBeDisabled();
            await user.type(_react1.screen.getByLabelText('タイトル'), 'タイトル');
            await user.type(_react1.screen.getByLabelText('投稿者名'), '投稿者');
            await user.type(_react1.screen.getByLabelText(/内容/), '内容');
            expect(submitButton).toBeEnabled();
        });
    });
    describe('バリデーション', ()=>{
        it('空のフィールドがある場合、エラーメッセージが表示される', async ()=>{
            const alertSpy = jest.spyOn(window, 'alert').mockImplementation();
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PostForm.default, {
                onPostCreated: mockOnPostCreated
            }));
            // タイトルと作成者のみ入力（内容が空）
            await user.type(_react1.screen.getByLabelText('タイトル'), 'タイトル');
            await user.type(_react1.screen.getByLabelText('投稿者名'), '作成者');
            // submitボタンは無効化されているため、強制的にsubmitイベントを発火
            const form = _react1.screen.getByRole('button', {
                name: '投稿する'
            }).closest('form');
            if (form) {
                _react1.fireEvent.submit(form);
            }
            expect(alertSpy).toHaveBeenCalledWith('すべての項目を入力してください');
            expect(fetch).not.toHaveBeenCalled();
        });
        it('空白文字のみの入力は無効と判定される', async ()=>{
            const alertSpy = jest.spyOn(window, 'alert').mockImplementation();
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PostForm.default, {
                onPostCreated: mockOnPostCreated
            }));
            await user.type(_react1.screen.getByLabelText('タイトル'), '   ');
            await user.type(_react1.screen.getByLabelText('投稿者名'), '   ');
            await user.type(_react1.screen.getByLabelText(/内容/), '   ');
            const submitButton = _react1.screen.getByRole('button', {
                name: '投稿する'
            });
            expect(submitButton).toBeDisabled();
        });
    });
    describe('投稿処理', ()=>{
        it('正常に投稿できる', async ()=>{
            const user = _userevent.default.setup();
            fetch.mockResolvedValueOnce({
                json: async ()=>({
                        success: true,
                        data: {
                            _id: '1'
                        }
                    })
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PostForm.default, {
                onPostCreated: mockOnPostCreated
            }));
            await user.type(_react1.screen.getByLabelText('タイトル'), 'テストタイトル');
            await user.type(_react1.screen.getByLabelText('投稿者名'), 'テスト投稿者');
            await user.type(_react1.screen.getByLabelText(/内容/), 'テスト内容');
            const submitButton = _react1.screen.getByRole('button', {
                name: '投稿する'
            });
            _react1.fireEvent.click(submitButton);
            await (0, _react1.waitFor)(()=>{
                expect(fetch).toHaveBeenCalledWith('/api/posts', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        title: 'テストタイトル',
                        author: 'テスト投稿者',
                        content: 'テスト内容'
                    })
                });
            });
            await (0, _react1.waitFor)(()=>{
                expect(mockOnPostCreated).toHaveBeenCalled();
                expect(_react1.screen.getByLabelText('タイトル')).toHaveValue('');
                expect(_react1.screen.getByLabelText('投稿者名')).toHaveValue('');
                expect(_react1.screen.getByLabelText(/内容/)).toHaveValue('');
            });
        });
        it('投稿中はボタンが無効化され、ローディング表示される', async ()=>{
            const user = _userevent.default.setup();
            let resolvePromise;
            const promise = new Promise((resolve)=>{
                resolvePromise = resolve;
            });
            fetch.mockReturnValueOnce(promise);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PostForm.default, {
                onPostCreated: mockOnPostCreated
            }));
            await user.type(_react1.screen.getByLabelText('タイトル'), 'テストタイトル');
            await user.type(_react1.screen.getByLabelText('投稿者名'), 'テスト投稿者');
            await user.type(_react1.screen.getByLabelText(/内容/), 'テスト内容');
            const submitButton = _react1.screen.getByRole('button', {
                name: '投稿する'
            });
            _react1.fireEvent.click(submitButton);
            await (0, _react1.waitFor)(()=>{
                expect(submitButton).toBeDisabled();
                expect(_react1.screen.getByText('投稿中...')).toBeInTheDocument();
            });
            // Promiseを解決して成功レスポンスを返す
            resolvePromise({
                json: async ()=>({
                        success: true,
                        data: {
                            _id: '1'
                        }
                    })
            });
            // フォームがクリアされるまで待つ
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByLabelText('タイトル')).toHaveValue('');
            });
        });
        it('投稿に失敗した場合、エラーメッセージが表示される', async ()=>{
            const alertSpy = jest.spyOn(window, 'alert').mockImplementation();
            const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();
            const user = _userevent.default.setup();
            fetch.mockResolvedValueOnce({
                json: async ()=>({
                        success: false,
                        error: 'サーバーエラー'
                    })
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PostForm.default, {
                onPostCreated: mockOnPostCreated
            }));
            await user.type(_react1.screen.getByLabelText('タイトル'), 'テストタイトル');
            await user.type(_react1.screen.getByLabelText('投稿者名'), 'テスト投稿者');
            await user.type(_react1.screen.getByLabelText(/内容/), 'テスト内容');
            const submitButton = _react1.screen.getByRole('button', {
                name: '投稿する'
            });
            _react1.fireEvent.click(submitButton);
            await (0, _react1.waitFor)(()=>{
                expect(alertSpy).toHaveBeenCalledWith('投稿の作成に失敗しました');
                expect(mockOnPostCreated).not.toHaveBeenCalled();
            });
            // フォームがクリアされないことを確認
            expect(_react1.screen.getByLabelText('タイトル')).toHaveValue('テストタイトル');
        });
        it('ネットワークエラーの場合、エラーメッセージが表示される', async ()=>{
            const alertSpy = jest.spyOn(window, 'alert').mockImplementation();
            const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();
            const user = _userevent.default.setup();
            fetch.mockRejectedValueOnce(new Error('Network error'));
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PostForm.default, {
                onPostCreated: mockOnPostCreated
            }));
            await user.type(_react1.screen.getByLabelText('タイトル'), 'テストタイトル');
            await user.type(_react1.screen.getByLabelText('投稿者名'), 'テスト投稿者');
            await user.type(_react1.screen.getByLabelText(/内容/), 'テスト内容');
            const submitButton = _react1.screen.getByRole('button', {
                name: '投稿する'
            });
            _react1.fireEvent.click(submitButton);
            await (0, _react1.waitFor)(()=>{
                expect(alertSpy).toHaveBeenCalledWith('投稿の作成に失敗しました');
                expect(consoleErrorSpy).toHaveBeenCalledWith('エラー:', expect.any(Error));
            });
        });
    });
    describe('アクセシビリティ', ()=>{
        it('ラベルとフィールドが正しく関連付けられている', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PostForm.default, {
                onPostCreated: mockOnPostCreated
            }));
            const titleInput = _react1.screen.getByLabelText('タイトル');
            const authorInput = _react1.screen.getByLabelText('投稿者名');
            const contentInput = _react1.screen.getByLabelText(/内容/);
            expect(titleInput).toHaveAttribute('id', 'title');
            expect(authorInput).toHaveAttribute('id', 'author');
            expect(contentInput).toHaveAttribute('id', 'content');
        });
        it('送信中は全フィールドが無効化される', async ()=>{
            const user = _userevent.default.setup();
            let resolvePromise;
            const promise = new Promise((resolve)=>{
                resolvePromise = resolve;
            });
            fetch.mockReturnValueOnce(promise);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PostForm.default, {
                onPostCreated: mockOnPostCreated
            }));
            await user.type(_react1.screen.getByLabelText('タイトル'), 'テストタイトル');
            await user.type(_react1.screen.getByLabelText('投稿者名'), 'テスト投稿者');
            await user.type(_react1.screen.getByLabelText(/内容/), 'テスト内容');
            _react1.fireEvent.click(_react1.screen.getByRole('button', {
                name: '投稿する'
            }));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByLabelText('タイトル')).toBeDisabled();
                expect(_react1.screen.getByLabelText('投稿者名')).toBeDisabled();
                expect(_react1.screen.getByLabelText(/内容/)).toBeDisabled();
            });
            resolvePromise({
                json: async ()=>({
                        success: true
                    })
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,
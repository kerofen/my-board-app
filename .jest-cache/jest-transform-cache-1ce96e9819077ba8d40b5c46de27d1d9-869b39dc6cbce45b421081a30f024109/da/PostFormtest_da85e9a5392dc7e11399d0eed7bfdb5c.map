{"version":3,"sources":["C:\\Users\\janne\\Documents\\workspace\\my-board-app\\__tests__\\components\\PostForm.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport PostForm from '@/components/PostForm';\n\n// fetchのモック\nglobal.fetch = jest.fn();\n\ndescribe('PostForm', () => {\n  const mockOnPostCreated = jest.fn();\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    // fetchのモックをリセット\n    (global.fetch as jest.Mock).mockClear();\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n\n  describe('レンダリング', () => {\n    it('フォームが正しくレンダリングされる', () => {\n      render(<PostForm onPostCreated={mockOnPostCreated} />);\n      \n      expect(screen.getByLabelText('タイトル')).toBeInTheDocument();\n      expect(screen.getByLabelText('投稿者名')).toBeInTheDocument();\n      expect(screen.getByLabelText(/内容/)).toBeInTheDocument();\n      expect(screen.getByRole('button', { name: '投稿する' })).toBeInTheDocument();\n      expect(screen.getByPlaceholderText('140文字以内で入力してください')).toBeInTheDocument();\n    });\n\n    it('初期状態では投稿ボタンが無効化されている', () => {\n      render(<PostForm onPostCreated={mockOnPostCreated} />);\n      \n      const submitButton = screen.getByRole('button', { name: '投稿する' });\n      expect(submitButton).toBeDisabled();\n    });\n  });\n\n  describe('入力フィールドの動作', () => {\n    it('各フィールドに入力できる', async () => {\n      const user = userEvent.setup();\n      render(<PostForm onPostCreated={mockOnPostCreated} />);\n      \n      const titleInput = screen.getByLabelText('タイトル');\n      const authorInput = screen.getByLabelText('投稿者名');\n      const contentInput = screen.getByLabelText(/内容/);\n      \n      await user.type(titleInput, 'テストタイトル');\n      await user.type(authorInput, 'テスト投稿者');\n      await user.type(contentInput, 'テスト内容');\n      \n      expect(titleInput).toHaveValue('テストタイトル');\n      expect(authorInput).toHaveValue('テスト投稿者');\n      expect(contentInput).toHaveValue('テスト内容');\n    });\n\n    it('文字数制限が正しく設定されている', () => {\n      render(<PostForm onPostCreated={mockOnPostCreated} />);\n      \n      const titleInput = screen.getByLabelText('タイトル') as HTMLInputElement;\n      const authorInput = screen.getByLabelText('投稿者名') as HTMLInputElement;\n      const contentInput = screen.getByLabelText(/内容/) as HTMLTextAreaElement;\n      \n      expect(titleInput.maxLength).toBe(100);\n      expect(authorInput.maxLength).toBe(50);\n      expect(contentInput.maxLength).toBe(140);\n    });\n\n    it('文字数カウンターが正しく表示される', async () => {\n      const user = userEvent.setup();\n      render(<PostForm onPostCreated={mockOnPostCreated} />);\n      \n      const contentInput = screen.getByLabelText(/内容/);\n      \n      await user.type(contentInput, 'テスト');\n      expect(screen.getByText('(3/140)')).toBeInTheDocument();\n      \n      await user.clear(contentInput);\n      await user.type(contentInput, 'a'.repeat(140));\n      expect(screen.getByText('(140/140)')).toBeInTheDocument();\n    });\n\n    it('140文字を超えると赤色で表示される', async () => {\n      const user = userEvent.setup();\n      render(<PostForm onPostCreated={mockOnPostCreated} />);\n      \n      const contentInput = screen.getByLabelText(/内容/);\n      \n      // maxLength=140なので実際には140文字までしか入力できない\n      await user.type(contentInput, 'a'.repeat(140));\n      \n      const counter = screen.getByText('(140/140)');\n      expect(counter).toHaveClass('text-gray-500');\n    });\n\n    it('全フィールドに入力すると投稿ボタンが有効になる', async () => {\n      const user = userEvent.setup();\n      render(<PostForm onPostCreated={mockOnPostCreated} />);\n      \n      const submitButton = screen.getByRole('button', { name: '投稿する' });\n      expect(submitButton).toBeDisabled();\n      \n      await user.type(screen.getByLabelText('タイトル'), 'タイトル');\n      await user.type(screen.getByLabelText('投稿者名'), '投稿者');\n      await user.type(screen.getByLabelText(/内容/), '内容');\n      \n      expect(submitButton).toBeEnabled();\n    });\n  });\n\n  describe('バリデーション', () => {\n    it('空のフィールドがある場合、エラーメッセージが表示される', async () => {\n      const alertSpy = jest.spyOn(window, 'alert').mockImplementation();\n      const user = userEvent.setup();\n      render(<PostForm onPostCreated={mockOnPostCreated} />);\n      \n      // タイトルと作成者のみ入力（内容が空）\n      await user.type(screen.getByLabelText('タイトル'), 'タイトル');\n      await user.type(screen.getByLabelText('投稿者名'), '作成者');\n      \n      // submitボタンは無効化されているため、強制的にsubmitイベントを発火\n      const form = screen.getByRole('button', { name: '投稿する' }).closest('form');\n      if (form) {\n        fireEvent.submit(form);\n      }\n      \n      expect(alertSpy).toHaveBeenCalledWith('すべての項目を入力してください');\n      expect(fetch).not.toHaveBeenCalled();\n    });\n\n    it('空白文字のみの入力は無効と判定される', async () => {\n      const alertSpy = jest.spyOn(window, 'alert').mockImplementation();\n      const user = userEvent.setup();\n      render(<PostForm onPostCreated={mockOnPostCreated} />);\n      \n      await user.type(screen.getByLabelText('タイトル'), '   ');\n      await user.type(screen.getByLabelText('投稿者名'), '   ');\n      await user.type(screen.getByLabelText(/内容/), '   ');\n      \n      const submitButton = screen.getByRole('button', { name: '投稿する' });\n      expect(submitButton).toBeDisabled();\n    });\n  });\n\n  describe('投稿処理', () => {\n    it('正常に投稿できる', async () => {\n      const user = userEvent.setup();\n      (fetch as jest.Mock).mockResolvedValueOnce({\n        json: async () => ({ success: true, data: { _id: '1' } }),\n      });\n      \n      render(<PostForm onPostCreated={mockOnPostCreated} />);\n      \n      await user.type(screen.getByLabelText('タイトル'), 'テストタイトル');\n      await user.type(screen.getByLabelText('投稿者名'), 'テスト投稿者');\n      await user.type(screen.getByLabelText(/内容/), 'テスト内容');\n      \n      const submitButton = screen.getByRole('button', { name: '投稿する' });\n      fireEvent.click(submitButton);\n      \n      await waitFor(() => {\n        expect(fetch).toHaveBeenCalledWith('/api/posts', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            title: 'テストタイトル',\n            author: 'テスト投稿者',\n            content: 'テスト内容',\n          }),\n        });\n      });\n      \n      await waitFor(() => {\n        expect(mockOnPostCreated).toHaveBeenCalled();\n        expect(screen.getByLabelText('タイトル')).toHaveValue('');\n        expect(screen.getByLabelText('投稿者名')).toHaveValue('');\n        expect(screen.getByLabelText(/内容/)).toHaveValue('');\n      });\n    });\n\n    it('投稿中はボタンが無効化され、ローディング表示される', async () => {\n      const user = userEvent.setup();\n      let resolvePromise: (value: any) => void;\n      const promise = new Promise((resolve) => {\n        resolvePromise = resolve;\n      });\n      \n      (fetch as jest.Mock).mockReturnValueOnce(promise);\n      \n      render(<PostForm onPostCreated={mockOnPostCreated} />);\n      \n      await user.type(screen.getByLabelText('タイトル'), 'テストタイトル');\n      await user.type(screen.getByLabelText('投稿者名'), 'テスト投稿者');\n      await user.type(screen.getByLabelText(/内容/), 'テスト内容');\n      \n      const submitButton = screen.getByRole('button', { name: '投稿する' });\n      fireEvent.click(submitButton);\n      \n      await waitFor(() => {\n        expect(submitButton).toBeDisabled();\n        expect(screen.getByText('投稿中...')).toBeInTheDocument();\n      });\n      \n      // Promiseを解決して成功レスポンスを返す\n      resolvePromise!({\n        json: async () => ({ success: true, data: { _id: '1' } }),\n      });\n      \n      // フォームがクリアされるまで待つ\n      await waitFor(() => {\n        expect(screen.getByLabelText('タイトル')).toHaveValue('');\n      });\n    });\n\n    it('投稿に失敗した場合、エラーメッセージが表示される', async () => {\n      const alertSpy = jest.spyOn(window, 'alert').mockImplementation();\n      const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();\n      const user = userEvent.setup();\n      \n      (fetch as jest.Mock).mockResolvedValueOnce({\n        json: async () => ({ success: false, error: 'サーバーエラー' }),\n      });\n      \n      render(<PostForm onPostCreated={mockOnPostCreated} />);\n      \n      await user.type(screen.getByLabelText('タイトル'), 'テストタイトル');\n      await user.type(screen.getByLabelText('投稿者名'), 'テスト投稿者');\n      await user.type(screen.getByLabelText(/内容/), 'テスト内容');\n      \n      const submitButton = screen.getByRole('button', { name: '投稿する' });\n      fireEvent.click(submitButton);\n      \n      await waitFor(() => {\n        expect(alertSpy).toHaveBeenCalledWith('投稿の作成に失敗しました');\n        expect(mockOnPostCreated).not.toHaveBeenCalled();\n      });\n      \n      // フォームがクリアされないことを確認\n      expect(screen.getByLabelText('タイトル')).toHaveValue('テストタイトル');\n    });\n\n    it('ネットワークエラーの場合、エラーメッセージが表示される', async () => {\n      const alertSpy = jest.spyOn(window, 'alert').mockImplementation();\n      const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();\n      const user = userEvent.setup();\n      \n      (fetch as jest.Mock).mockRejectedValueOnce(new Error('Network error'));\n      \n      render(<PostForm onPostCreated={mockOnPostCreated} />);\n      \n      await user.type(screen.getByLabelText('タイトル'), 'テストタイトル');\n      await user.type(screen.getByLabelText('投稿者名'), 'テスト投稿者');\n      await user.type(screen.getByLabelText(/内容/), 'テスト内容');\n      \n      const submitButton = screen.getByRole('button', { name: '投稿する' });\n      fireEvent.click(submitButton);\n      \n      await waitFor(() => {\n        expect(alertSpy).toHaveBeenCalledWith('投稿の作成に失敗しました');\n        expect(consoleErrorSpy).toHaveBeenCalledWith('エラー:', expect.any(Error));\n      });\n    });\n  });\n\n  describe('アクセシビリティ', () => {\n    it('ラベルとフィールドが正しく関連付けられている', () => {\n      render(<PostForm onPostCreated={mockOnPostCreated} />);\n      \n      const titleInput = screen.getByLabelText('タイトル');\n      const authorInput = screen.getByLabelText('投稿者名');\n      const contentInput = screen.getByLabelText(/内容/);\n      \n      expect(titleInput).toHaveAttribute('id', 'title');\n      expect(authorInput).toHaveAttribute('id', 'author');\n      expect(contentInput).toHaveAttribute('id', 'content');\n    });\n\n    it('送信中は全フィールドが無効化される', async () => {\n      const user = userEvent.setup();\n      let resolvePromise: (value: any) => void;\n      const promise = new Promise((resolve) => {\n        resolvePromise = resolve;\n      });\n      \n      (fetch as jest.Mock).mockReturnValueOnce(promise);\n      \n      render(<PostForm onPostCreated={mockOnPostCreated} />);\n      \n      await user.type(screen.getByLabelText('タイトル'), 'テストタイトル');\n      await user.type(screen.getByLabelText('投稿者名'), 'テスト投稿者');\n      await user.type(screen.getByLabelText(/内容/), 'テスト内容');\n      \n      fireEvent.click(screen.getByRole('button', { name: '投稿する' }));\n      \n      await waitFor(() => {\n        expect(screen.getByLabelText('タイトル')).toBeDisabled();\n        expect(screen.getByLabelText('投稿者名')).toBeDisabled();\n        expect(screen.getByLabelText(/内容/)).toBeDisabled();\n      });\n      \n      resolvePromise!({\n        json: async () => ({ success: true }),\n      });\n    });\n  });\n});"],"names":["global","fetch","jest","fn","describe","mockOnPostCreated","beforeEach","clearAllMocks","mockClear","afterEach","restoreAllMocks","it","render","PostForm","onPostCreated","expect","screen","getByLabelText","toBeInTheDocument","getByRole","name","getByPlaceholderText","submitButton","toBeDisabled","user","userEvent","setup","titleInput","authorInput","contentInput","type","toHaveValue","maxLength","toBe","getByText","clear","repeat","counter","toHaveClass","toBeEnabled","alertSpy","spyOn","window","mockImplementation","form","closest","fireEvent","submit","toHaveBeenCalledWith","not","toHaveBeenCalled","mockResolvedValueOnce","json","success","data","_id","click","waitFor","method","headers","body","JSON","stringify","title","author","content","resolvePromise","promise","Promise","resolve","mockReturnValueOnce","consoleErrorSpy","console","error","mockRejectedValueOnce","Error","any","toHaveAttribute"],"mappings":"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"}
1764320f0c65e2c292a9efac5cf5f6f0
"use strict";
// モジュールのモック
jest.mock('@/lib/mongodb');
jest.mock('@/models/Post');
jest.mock('@/lib/mongodb-mock');
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _route = require("../../app/api/posts/route");
const _server = require("next/server");
const _mongodb = /*#__PURE__*/ _interop_require_default(require("../../lib/mongodb"));
const _Post = /*#__PURE__*/ _interop_require_default(require("../../models/Post"));
const _mongodbmock = /*#__PURE__*/ _interop_require_wildcard(require("../../lib/mongodb-mock"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
describe('POST /api/posts', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    it('新規投稿を作成できる', async ()=>{
        const mockPost = {
            _id: '1',
            title: 'テストタイトル',
            author: 'テスト投稿者',
            content: 'テスト内容',
            createdAt: new Date(),
            updatedAt: new Date()
        };
        _mongodb.default.mockResolvedValueOnce(undefined);
        _Post.default.create.mockResolvedValueOnce(mockPost);
        const request = new _server.NextRequest('http://localhost:3000/api/posts', {
            method: 'POST',
            body: JSON.stringify({
                title: 'テストタイトル',
                author: 'テスト投稿者',
                content: 'テスト内容'
            })
        });
        const response = await (0, _route.POST)(request);
        const data = await response.json();
        expect(response.status).toBe(201);
        expect(data.success).toBe(true);
        expect(data.data).toEqual(mockPost);
    });
    it('必須フィールドがない場合エラーを返す', async ()=>{
        ;
        _mongodb.default.mockResolvedValueOnce(undefined);
        _Post.default.create.mockRejectedValueOnce(new Error('タイトルは必須です'));
        const request = new _server.NextRequest('http://localhost:3000/api/posts', {
            method: 'POST',
            body: JSON.stringify({
                author: 'テスト投稿者',
                content: 'テスト内容'
            })
        });
        const response = await (0, _route.POST)(request);
        const data = await response.json();
        expect(response.status).toBe(400);
        expect(data.success).toBe(false);
        expect(data.error).toContain('タイトルは必須です');
    });
    it('MongoDB接続失敗時はモックDBを使用する', async ()=>{
        const mockPost = {
            _id: 'mock_1',
            title: 'テストタイトル',
            author: 'テスト投稿者',
            content: 'テスト内容',
            createdAt: new Date(),
            updatedAt: new Date()
        };
        _mongodb.default.mockRejectedValueOnce(new Error('接続失敗'));
        _mongodbmock.create.mockReturnValueOnce(mockPost);
        const request = new _server.NextRequest('http://localhost:3000/api/posts', {
            method: 'POST',
            body: JSON.stringify({
                title: 'テストタイトル',
                author: 'テスト投稿者',
                content: 'テスト内容'
            })
        });
        const response = await (0, _route.POST)(request);
        const data = await response.json();
        expect(response.status).toBe(201);
        expect(data.success).toBe(true);
        expect(data.data).toEqual(mockPost);
        expect(data.mock).toBe(true);
    });
});
describe('GET /api/posts', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    it('投稿一覧を取得できる', async ()=>{
        const mockPosts = [
            {
                _id: '1',
                title: 'テスト1',
                author: '投稿者1',
                content: '内容1',
                createdAt: new Date(),
                updatedAt: new Date()
            },
            {
                _id: '2',
                title: 'テスト2',
                author: '投稿者2',
                content: '内容2',
                createdAt: new Date(),
                updatedAt: new Date()
            }
        ];
        _mongodb.default.mockResolvedValueOnce(undefined);
        _Post.default.find.mockReturnValue({
            sort: jest.fn().mockResolvedValueOnce(mockPosts)
        });
        const response = await (0, _route.GET)();
        const data = await response.json();
        expect(response.status).toBe(200);
        expect(data.success).toBe(true);
        expect(data.data).toEqual(mockPosts);
    });
    it('投稿が0件の場合空配列を返す', async ()=>{
        ;
        _mongodb.default.mockResolvedValueOnce(undefined);
        _Post.default.find.mockReturnValue({
            sort: jest.fn().mockResolvedValueOnce([])
        });
        const response = await (0, _route.GET)();
        const data = await response.json();
        expect(response.status).toBe(200);
        expect(data.success).toBe(true);
        expect(data.data).toEqual([]);
    });
    it('MongoDB接続失敗時はモックDBを使用する', async ()=>{
        const mockPosts = [
            {
                _id: 'mock_1',
                title: 'モックテスト',
                author: 'モック投稿者',
                content: 'モック内容',
                createdAt: new Date(),
                updatedAt: new Date()
            }
        ];
        _mongodb.default.mockRejectedValueOnce(new Error('接続失敗'));
        _mongodbmock.find.mockReturnValueOnce(mockPosts);
        const response = await (0, _route.GET)();
        const data = await response.json();
        expect(response.status).toBe(200);
        expect(data.success).toBe(true);
        expect(data.data).toEqual(mockPosts);
        expect(data.mock).toBe(true);
        expect(data.warning).toContain('オフラインモード');
    });
});

//# sourceMappingURL=data:application/json;base64,
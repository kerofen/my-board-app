{"version":3,"sources":["C:\\Users\\janne\\Documents\\workspace\\my-board-app\\__tests__\\api\\posts.test.ts"],"sourcesContent":["import { GET, POST } from '@/app/api/posts/route'\nimport { NextRequest } from 'next/server'\nimport connectDB from '@/lib/mongodb'\nimport Post from '@/models/Post'\nimport * as mockDb from '@/lib/mongodb-mock'\n\n// モジュールのモック\njest.mock('@/lib/mongodb')\njest.mock('@/models/Post')\njest.mock('@/lib/mongodb-mock')\n\ndescribe('POST /api/posts', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  it('新規投稿を作成できる', async () => {\n    const mockPost = {\n      _id: '1',\n      title: 'テストタイトル',\n      author: 'テスト投稿者',\n      content: 'テスト内容',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    }\n    \n    ;(connectDB as jest.Mock).mockResolvedValueOnce(undefined)\n    ;(Post.create as jest.Mock).mockResolvedValueOnce(mockPost)\n    \n    const request = new NextRequest('http://localhost:3000/api/posts', {\n      method: 'POST',\n      body: JSON.stringify({\n        title: 'テストタイトル',\n        author: 'テスト投稿者',\n        content: 'テスト内容',\n      }),\n    })\n    \n    const response = await POST(request)\n    const data = await response.json()\n    \n    expect(response.status).toBe(201)\n    expect(data.success).toBe(true)\n    expect(data.data).toEqual(mockPost)\n  })\n\n  it('必須フィールドがない場合エラーを返す', async () => {\n    ;(connectDB as jest.Mock).mockResolvedValueOnce(undefined)\n    ;(Post.create as jest.Mock).mockRejectedValueOnce(\n      new Error('タイトルは必須です')\n    )\n    \n    const request = new NextRequest('http://localhost:3000/api/posts', {\n      method: 'POST',\n      body: JSON.stringify({\n        author: 'テスト投稿者',\n        content: 'テスト内容',\n      }),\n    })\n    \n    const response = await POST(request)\n    const data = await response.json()\n    \n    expect(response.status).toBe(400)\n    expect(data.success).toBe(false)\n    expect(data.error).toContain('タイトルは必須です')\n  })\n\n  it('MongoDB接続失敗時はモックDBを使用する', async () => {\n    const mockPost = {\n      _id: 'mock_1',\n      title: 'テストタイトル',\n      author: 'テスト投稿者',\n      content: 'テスト内容',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    }\n    \n    ;(connectDB as jest.Mock).mockRejectedValueOnce(new Error('接続失敗'))\n    ;(mockDb.create as jest.Mock).mockReturnValueOnce(mockPost)\n    \n    const request = new NextRequest('http://localhost:3000/api/posts', {\n      method: 'POST',\n      body: JSON.stringify({\n        title: 'テストタイトル',\n        author: 'テスト投稿者',\n        content: 'テスト内容',\n      }),\n    })\n    \n    const response = await POST(request)\n    const data = await response.json()\n    \n    expect(response.status).toBe(201)\n    expect(data.success).toBe(true)\n    expect(data.data).toEqual(mockPost)\n    expect(data.mock).toBe(true)\n  })\n})\n\ndescribe('GET /api/posts', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  it('投稿一覧を取得できる', async () => {\n    const mockPosts = [\n      {\n        _id: '1',\n        title: 'テスト1',\n        author: '投稿者1',\n        content: '内容1',\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        _id: '2',\n        title: 'テスト2',\n        author: '投稿者2',\n        content: '内容2',\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    ]\n    \n    ;(connectDB as jest.Mock).mockResolvedValueOnce(undefined)\n    ;(Post.find as jest.Mock).mockReturnValue({\n      sort: jest.fn().mockResolvedValueOnce(mockPosts),\n    })\n    \n    const response = await GET()\n    const data = await response.json()\n    \n    expect(response.status).toBe(200)\n    expect(data.success).toBe(true)\n    expect(data.data).toEqual(mockPosts)\n  })\n\n  it('投稿が0件の場合空配列を返す', async () => {\n    ;(connectDB as jest.Mock).mockResolvedValueOnce(undefined)\n    ;(Post.find as jest.Mock).mockReturnValue({\n      sort: jest.fn().mockResolvedValueOnce([]),\n    })\n    \n    const response = await GET()\n    const data = await response.json()\n    \n    expect(response.status).toBe(200)\n    expect(data.success).toBe(true)\n    expect(data.data).toEqual([])\n  })\n\n  it('MongoDB接続失敗時はモックDBを使用する', async () => {\n    const mockPosts = [\n      {\n        _id: 'mock_1',\n        title: 'モックテスト',\n        author: 'モック投稿者',\n        content: 'モック内容',\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    ]\n    \n    ;(connectDB as jest.Mock).mockRejectedValueOnce(new Error('接続失敗'))\n    ;(mockDb.find as jest.Mock).mockReturnValueOnce(mockPosts)\n    \n    const response = await GET()\n    const data = await response.json()\n    \n    expect(response.status).toBe(200)\n    expect(data.success).toBe(true)\n    expect(data.data).toEqual(mockPosts)\n    expect(data.mock).toBe(true)\n    expect(data.warning).toContain('オフラインモード')\n  })\n})"],"names":["jest","mock","describe","beforeEach","clearAllMocks","it","mockPost","_id","title","author","content","createdAt","Date","updatedAt","connectDB","mockResolvedValueOnce","undefined","Post","create","request","NextRequest","method","body","JSON","stringify","response","POST","data","json","expect","status","toBe","success","toEqual","mockRejectedValueOnce","Error","error","toContain","mockDb","mockReturnValueOnce","mockPosts","find","mockReturnValue","sort","fn","GET","warning"],"mappings":"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"}
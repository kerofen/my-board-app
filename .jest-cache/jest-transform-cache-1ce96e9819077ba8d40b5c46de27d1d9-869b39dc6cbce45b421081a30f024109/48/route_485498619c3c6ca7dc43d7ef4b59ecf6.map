{"version":3,"names":["DELETE","cov_2jn2hygsjh","f","s","GET","PUT","request","params","id","post","useMock","_mongodb","default","_Post","findById","dbError","console","warn","_mongodbmock","mockDb","b","_server","NextResponse","json","success","error","status","data","mock","body","findByIdAndUpdate","new","runValidators","deletedPost","findByIdAndDelete"],"sources":["C:\\Users\\janne\\Documents\\workspace\\my-board-app\\app\\api\\posts\\[id]\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport dbConnect from '@/lib/mongodb';\nimport Post from '@/models/Post';\nimport { mockDb } from '@/lib/mongodb-mock';\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n    let post = null;\n    let useMock = false;\n    \n    try {\n      await dbConnect();\n      post = await Post.findById(id);\n    } catch (dbError) {\n      console.warn('MongoDB接続失敗、モックデータを使用', dbError);\n      post = await mockDb.findById(id);\n      useMock = true;\n    }\n    \n    if (!post) {\n      return NextResponse.json(\n        { success: false, error: '投稿が見つかりません' },\n        { status: 404 }\n      );\n    }\n    \n    return NextResponse.json({ success: true, data: post, mock: useMock });\n  } catch (error) {\n    console.error('エラー:', error);\n    return NextResponse.json(\n      { success: false, error: '投稿の取得に失敗しました' },\n      { status: 400 }\n    );\n  }\n}\n\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n    const body = await request.json();\n    let post = null;\n    let useMock = false;\n    \n    try {\n      await dbConnect();\n      post = await Post.findByIdAndUpdate(id, body, {\n        new: true,\n        runValidators: true,\n      });\n    } catch (dbError) {\n      console.warn('MongoDB接続失敗、モックデータを使用', dbError);\n      post = await mockDb.findByIdAndUpdate(id, body);\n      useMock = true;\n    }\n    \n    if (!post) {\n      return NextResponse.json(\n        { success: false, error: '投稿が見つかりません' },\n        { status: 404 }\n      );\n    }\n    \n    return NextResponse.json({ success: true, data: post, mock: useMock });\n  } catch (error) {\n    console.error('エラー:', error);\n    return NextResponse.json(\n      { success: false, error: '投稿の更新に失敗しました' },\n      { status: 400 }\n    );\n  }\n}\n\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params;\n    let deletedPost = null;\n    let useMock = false;\n    \n    try {\n      await dbConnect();\n      deletedPost = await Post.findByIdAndDelete(id);\n    } catch (dbError) {\n      console.warn('MongoDB接続失敗、モックデータを使用', dbError);\n      deletedPost = await mockDb.findByIdAndDelete(id);\n      useMock = true;\n    }\n    \n    if (!deletedPost) {\n      return NextResponse.json(\n        { success: false, error: '投稿が見つかりません' },\n        { status: 404 }\n      );\n    }\n    \n    return NextResponse.json({ success: true, data: {}, mock: useMock });\n  } catch (error) {\n    console.error('エラー:', error);\n    return NextResponse.json(\n      { success: false, error: '投稿の削除に失敗しました' },\n      { status: 400 }\n    );\n  }\n}"],"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","ignoreList":[]}
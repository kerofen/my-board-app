{"version":3,"sources":["C:\\Users\\janne\\Documents\\workspace\\my-board-app\\__tests__\\components\\EditForm.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport EditForm from '@/components/EditForm';\n\n// fetchのモック\nglobal.fetch = jest.fn();\n\ndescribe('EditForm', () => {\n  const mockPost = {\n    _id: '123',\n    title: '元のタイトル',\n    author: '元の作成者',\n    content: '元の内容',\n    createdAt: '2024-01-01T00:00:00Z',\n    updatedAt: '2024-01-01T00:00:00Z',\n  };\n\n  const mockOnUpdated = jest.fn();\n  const mockOnCancel = jest.fn();\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n\n  describe('レンダリング', () => {\n    it('編集フォームが正しくレンダリングされる', () => {\n      render(\n        <EditForm\n          post={mockPost}\n          onUpdated={mockOnUpdated}\n          onCancel={mockOnCancel}\n        />\n      );\n\n      expect(screen.getByText('投稿を編集')).toBeInTheDocument();\n      expect(screen.getByLabelText('タイトル')).toHaveValue(mockPost.title);\n      expect(screen.getByLabelText('投稿者名')).toHaveValue(mockPost.author);\n      expect(screen.getByLabelText(/内容/)).toHaveValue(mockPost.content);\n      expect(screen.getByRole('button', { name: '保存' })).toBeInTheDocument();\n      expect(screen.getByRole('button', { name: 'キャンセル' })).toBeInTheDocument();\n    });\n\n    it('初期値が正しく設定される', () => {\n      render(\n        <EditForm\n          post={mockPost}\n          onUpdated={mockOnUpdated}\n          onCancel={mockOnCancel}\n        />\n      );\n\n      const titleInput = screen.getByLabelText('タイトル');\n      const authorInput = screen.getByLabelText('投稿者名');\n      const contentInput = screen.getByLabelText(/内容/);\n\n      expect(titleInput).toHaveValue('元のタイトル');\n      expect(authorInput).toHaveValue('元の作成者');\n      expect(contentInput).toHaveValue('元の内容');\n    });\n  });\n\n  describe('入力フィールドの動作', () => {\n    it('各フィールドを編集できる', async () => {\n      const user = userEvent.setup();\n      render(\n        <EditForm\n          post={mockPost}\n          onUpdated={mockOnUpdated}\n          onCancel={mockOnCancel}\n        />\n      );\n\n      const titleInput = screen.getByLabelText('タイトル');\n      const authorInput = screen.getByLabelText('投稿者名');\n      const contentInput = screen.getByLabelText(/内容/);\n\n      await user.clear(titleInput);\n      await user.type(titleInput, '新しいタイトル');\n      \n      await user.clear(authorInput);\n      await user.type(authorInput, '新しい作成者');\n      \n      await user.clear(contentInput);\n      await user.type(contentInput, '新しい内容');\n\n      expect(titleInput).toHaveValue('新しいタイトル');\n      expect(authorInput).toHaveValue('新しい作成者');\n      expect(contentInput).toHaveValue('新しい内容');\n    });\n\n    it('文字数制限が適用される', () => {\n      render(\n        <EditForm\n          post={mockPost}\n          onUpdated={mockOnUpdated}\n          onCancel={mockOnCancel}\n        />\n      );\n\n      const titleInput = screen.getByLabelText('タイトル') as HTMLInputElement;\n      const authorInput = screen.getByLabelText('投稿者名') as HTMLInputElement;\n      const contentInput = screen.getByLabelText(/内容/) as HTMLTextAreaElement;\n\n      expect(titleInput.maxLength).toBe(100);\n      expect(authorInput.maxLength).toBe(50);\n      expect(contentInput.maxLength).toBe(2000);\n    });\n  });\n\n  describe('更新処理', () => {\n    it('正常に更新できる', async () => {\n      const user = userEvent.setup();\n      const updatedPost = {\n        ...mockPost,\n        title: '更新後のタイトル',\n        author: '更新後の作成者',\n        content: '更新後の内容',\n        updatedAt: new Date().toISOString(),\n      };\n\n      (fetch as jest.Mock).mockResolvedValueOnce({\n        ok: true,\n        json: async () => updatedPost,\n      });\n\n      render(\n        <EditForm\n          post={mockPost}\n          onUpdated={mockOnUpdated}\n          onCancel={mockOnCancel}\n        />\n      );\n\n      const titleInput = screen.getByLabelText('タイトル');\n      const authorInput = screen.getByLabelText('投稿者名');\n      const contentInput = screen.getByLabelText(/内容/);\n\n      await user.clear(titleInput);\n      await user.type(titleInput, '更新後のタイトル');\n      \n      await user.clear(authorInput);\n      await user.type(authorInput, '更新後の作成者');\n      \n      await user.clear(contentInput);\n      await user.type(contentInput, '更新後の内容');\n\n      const saveButton = screen.getByRole('button', { name: '保存' });\n      fireEvent.click(saveButton);\n\n      await waitFor(() => {\n        expect(fetch).toHaveBeenCalledWith(`/api/posts/${mockPost._id}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            title: '更新後のタイトル',\n            author: '更新後の作成者',\n            content: '更新後の内容',\n          }),\n        });\n      });\n\n      await waitFor(() => {\n        expect(mockOnUpdated).toHaveBeenCalled();\n      });\n    });\n\n    it('更新中はボタンが無効化される', async () => {\n      const user = userEvent.setup();\n      let resolvePromise: (value: any) => void;\n      const promise = new Promise((resolve) => {\n        resolvePromise = resolve;\n      });\n\n      (fetch as jest.Mock).mockReturnValueOnce(promise);\n\n      render(\n        <EditForm\n          post={mockPost}\n          onUpdated={mockOnUpdated}\n          onCancel={mockOnCancel}\n        />\n      );\n\n      const saveButton = screen.getByRole('button', { name: '保存' });\n      fireEvent.click(saveButton);\n\n      await waitFor(() => {\n        expect(saveButton).toBeDisabled();\n        expect(screen.getByText('保存中...')).toBeInTheDocument();\n      });\n\n      resolvePromise!({\n        ok: true,\n        json: async () => mockPost,\n      });\n\n      await waitFor(() => {\n        expect(mockOnUpdated).toHaveBeenCalled();\n      });\n    });\n\n    it('更新エラー時にエラーメッセージが表示される', async () => {\n      const alertSpy = jest.spyOn(window, 'alert').mockImplementation();\n      \n      (fetch as jest.Mock).mockResolvedValueOnce({\n        ok: false,\n        json: async () => ({ error: 'サーバーエラー' }),\n      });\n\n      render(\n        <EditForm\n          post={mockPost}\n          onUpdated={mockOnUpdated}\n          onCancel={mockOnCancel}\n        />\n      );\n\n      const saveButton = screen.getByRole('button', { name: '保存' });\n      fireEvent.click(saveButton);\n\n      await waitFor(() => {\n        expect(alertSpy).toHaveBeenCalledWith('更新に失敗しました');\n        expect(mockOnUpdated).not.toHaveBeenCalled();\n      });\n    });\n\n    it('ネットワークエラー時の処理', async () => {\n      const alertSpy = jest.spyOn(window, 'alert').mockImplementation();\n      const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();\n      \n      (fetch as jest.Mock).mockRejectedValueOnce(new Error('Network error'));\n\n      render(\n        <EditForm\n          post={mockPost}\n          onUpdated={mockOnUpdated}\n          onCancel={mockOnCancel}\n        />\n      );\n\n      const saveButton = screen.getByRole('button', { name: '保存' });\n      fireEvent.click(saveButton);\n\n      await waitFor(() => {\n        expect(alertSpy).toHaveBeenCalledWith('更新に失敗しました');\n        expect(consoleErrorSpy).toHaveBeenCalledWith('更新エラー:', expect.any(Error));\n      });\n    });\n  });\n\n  describe('キャンセル処理', () => {\n    it('キャンセルボタンでonCancelが呼ばれる', async () => {\n      const user = userEvent.setup();\n      \n      render(\n        <EditForm\n          post={mockPost}\n          onUpdated={mockOnUpdated}\n          onCancel={mockOnCancel}\n        />\n      );\n\n      const cancelButton = screen.getByRole('button', { name: 'キャンセル' });\n      await user.click(cancelButton);\n\n      expect(mockOnCancel).toHaveBeenCalled();\n      expect(fetch).not.toHaveBeenCalled();\n    });\n\n    it('編集内容が破棄される', async () => {\n      const user = userEvent.setup();\n      \n      render(\n        <EditForm\n          post={mockPost}\n          onUpdated={mockOnUpdated}\n          onCancel={mockOnCancel}\n        />\n      );\n\n      const titleInput = screen.getByLabelText('タイトル');\n      await user.clear(titleInput);\n      await user.type(titleInput, '変更したタイトル');\n\n      const cancelButton = screen.getByRole('button', { name: 'キャンセル' });\n      await user.click(cancelButton);\n\n      expect(mockOnCancel).toHaveBeenCalled();\n      // 変更内容は保存されない\n      expect(fetch).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('バリデーション', () => {\n    it('空のフィールドでは保存ボタンが無効', async () => {\n      const user = userEvent.setup();\n      \n      render(\n        <EditForm\n          post={mockPost}\n          onUpdated={mockOnUpdated}\n          onCancel={mockOnCancel}\n        />\n      );\n\n      const titleInput = screen.getByLabelText('タイトル');\n      await user.clear(titleInput);\n\n      const saveButton = screen.getByRole('button', { name: '保存' });\n      expect(saveButton).toBeDisabled();\n    });\n\n    it('空白文字のみの入力では保存ボタンが無効', async () => {\n      const user = userEvent.setup();\n      \n      render(\n        <EditForm\n          post={mockPost}\n          onUpdated={mockOnUpdated}\n          onCancel={mockOnCancel}\n        />\n      );\n\n      const titleInput = screen.getByLabelText('タイトル');\n      await user.clear(titleInput);\n      await user.type(titleInput, '   ');\n\n      const saveButton = screen.getByRole('button', { name: '保存' });\n      expect(saveButton).toBeDisabled();\n    });\n\n    it('文字数超過時は保存ボタンが無効', async () => {\n      const user = userEvent.setup();\n      \n      render(\n        <EditForm\n          post={mockPost}\n          onUpdated={mockOnUpdated}\n          onCancel={mockOnCancel}\n        />\n      );\n\n      const contentInput = screen.getByLabelText(/内容/);\n      await user.clear(contentInput);\n      \n      // maxLengthで制限されるため、実際には2000文字までしか入力できない\n      await user.type(contentInput, 'a'.repeat(2001));\n      \n      const actualValue = await contentInput.getAttribute('value');\n      expect(actualValue?.length).toBeLessThanOrEqual(2000);\n    });\n  });\n\n  describe('アクセシビリティ', () => {\n    it('ラベルとフィールドが正しく関連付けられている', () => {\n      render(\n        <EditForm\n          post={mockPost}\n          onUpdated={mockOnUpdated}\n          onCancel={mockOnCancel}\n        />\n      );\n\n      const titleInput = screen.getByLabelText('タイトル');\n      const authorInput = screen.getByLabelText('投稿者名');\n      const contentInput = screen.getByLabelText(/内容/);\n\n      expect(titleInput).toHaveAttribute('id');\n      expect(authorInput).toHaveAttribute('id');\n      expect(contentInput).toHaveAttribute('id');\n    });\n\n    it('更新中は全フィールドが無効化される', async () => {\n      let resolvePromise: (value: any) => void;\n      const promise = new Promise((resolve) => {\n        resolvePromise = resolve;\n      });\n\n      (fetch as jest.Mock).mockReturnValueOnce(promise);\n\n      render(\n        <EditForm\n          post={mockPost}\n          onUpdated={mockOnUpdated}\n          onCancel={mockOnCancel}\n        />\n      );\n\n      const saveButton = screen.getByRole('button', { name: '保存' });\n      fireEvent.click(saveButton);\n\n      await waitFor(() => {\n        expect(screen.getByLabelText('タイトル')).toBeDisabled();\n        expect(screen.getByLabelText('投稿者名')).toBeDisabled();\n        expect(screen.getByLabelText(/内容/)).toBeDisabled();\n        expect(screen.getByRole('button', { name: 'キャンセル' })).toBeDisabled();\n      });\n\n      resolvePromise!({\n        ok: true,\n        json: async () => mockPost,\n      });\n    });\n  });\n});"],"names":["global","fetch","jest","fn","describe","mockPost","_id","title","author","content","createdAt","updatedAt","mockOnUpdated","mockOnCancel","beforeEach","clearAllMocks","afterEach","restoreAllMocks","it","render","EditForm","post","onUpdated","onCancel","expect","screen","getByText","toBeInTheDocument","getByLabelText","toHaveValue","getByRole","name","titleInput","authorInput","contentInput","user","userEvent","setup","clear","type","maxLength","toBe","updatedPost","Date","toISOString","mockResolvedValueOnce","ok","json","saveButton","fireEvent","click","waitFor","toHaveBeenCalledWith","method","headers","body","JSON","stringify","toHaveBeenCalled","resolvePromise","promise","Promise","resolve","mockReturnValueOnce","toBeDisabled","alertSpy","spyOn","window","mockImplementation","error","not","consoleErrorSpy","console","mockRejectedValueOnce","Error","any","cancelButton","repeat","actualValue","getAttribute","length","toBeLessThanOrEqual","toHaveAttribute"],"mappings":";;;;;8DAAkB;wBACiC;kEAC7B;iEACD;;;;;;AAErB,YAAY;AACZA,OAAOC,KAAK,GAAGC,KAAKC,EAAE;AAEtBC,SAAS,YAAY;IACnB,MAAMC,WAAW;QACfC,KAAK;QACLC,OAAO;QACPC,QAAQ;QACRC,SAAS;QACTC,WAAW;QACXC,WAAW;IACb;IAEA,MAAMC,gBAAgBV,KAAKC,EAAE;IAC7B,MAAMU,eAAeX,KAAKC,EAAE;IAE5BW,WAAW;QACTZ,KAAKa,aAAa;IACpB;IAEAC,UAAU;QACRd,KAAKe,eAAe;IACtB;IAEAb,SAAS,UAAU;QACjBc,GAAG,uBAAuB;YACxBC,IAAAA,cAAM,gBACJ,qBAACC,iBAAQ;gBACPC,MAAMhB;gBACNiB,WAAWV;gBACXW,UAAUV;;YAIdW,OAAOC,cAAM,CAACC,SAAS,CAAC,UAAUC,iBAAiB;YACnDH,OAAOC,cAAM,CAACG,cAAc,CAAC,SAASC,WAAW,CAACxB,SAASE,KAAK;YAChEiB,OAAOC,cAAM,CAACG,cAAc,CAAC,SAASC,WAAW,CAACxB,SAASG,MAAM;YACjEgB,OAAOC,cAAM,CAACG,cAAc,CAAC,OAAOC,WAAW,CAACxB,SAASI,OAAO;YAChEe,OAAOC,cAAM,CAACK,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAK,IAAIJ,iBAAiB;YACpEH,OAAOC,cAAM,CAACK,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAQ,IAAIJ,iBAAiB;QACzE;QAEAT,GAAG,gBAAgB;YACjBC,IAAAA,cAAM,gBACJ,qBAACC,iBAAQ;gBACPC,MAAMhB;gBACNiB,WAAWV;gBACXW,UAAUV;;YAId,MAAMmB,aAAaP,cAAM,CAACG,cAAc,CAAC;YACzC,MAAMK,cAAcR,cAAM,CAACG,cAAc,CAAC;YAC1C,MAAMM,eAAeT,cAAM,CAACG,cAAc,CAAC;YAE3CJ,OAAOQ,YAAYH,WAAW,CAAC;YAC/BL,OAAOS,aAAaJ,WAAW,CAAC;YAChCL,OAAOU,cAAcL,WAAW,CAAC;QACnC;IACF;IAEAzB,SAAS,cAAc;QACrBc,GAAG,gBAAgB;YACjB,MAAMiB,OAAOC,kBAAS,CAACC,KAAK;YAC5BlB,IAAAA,cAAM,gBACJ,qBAACC,iBAAQ;gBACPC,MAAMhB;gBACNiB,WAAWV;gBACXW,UAAUV;;YAId,MAAMmB,aAAaP,cAAM,CAACG,cAAc,CAAC;YACzC,MAAMK,cAAcR,cAAM,CAACG,cAAc,CAAC;YAC1C,MAAMM,eAAeT,cAAM,CAACG,cAAc,CAAC;YAE3C,MAAMO,KAAKG,KAAK,CAACN;YACjB,MAAMG,KAAKI,IAAI,CAACP,YAAY;YAE5B,MAAMG,KAAKG,KAAK,CAACL;YACjB,MAAME,KAAKI,IAAI,CAACN,aAAa;YAE7B,MAAME,KAAKG,KAAK,CAACJ;YACjB,MAAMC,KAAKI,IAAI,CAACL,cAAc;YAE9BV,OAAOQ,YAAYH,WAAW,CAAC;YAC/BL,OAAOS,aAAaJ,WAAW,CAAC;YAChCL,OAAOU,cAAcL,WAAW,CAAC;QACnC;QAEAX,GAAG,eAAe;YAChBC,IAAAA,cAAM,gBACJ,qBAACC,iBAAQ;gBACPC,MAAMhB;gBACNiB,WAAWV;gBACXW,UAAUV;;YAId,MAAMmB,aAAaP,cAAM,CAACG,cAAc,CAAC;YACzC,MAAMK,cAAcR,cAAM,CAACG,cAAc,CAAC;YAC1C,MAAMM,eAAeT,cAAM,CAACG,cAAc,CAAC;YAE3CJ,OAAOQ,WAAWQ,SAAS,EAAEC,IAAI,CAAC;YAClCjB,OAAOS,YAAYO,SAAS,EAAEC,IAAI,CAAC;YACnCjB,OAAOU,aAAaM,SAAS,EAAEC,IAAI,CAAC;QACtC;IACF;IAEArC,SAAS,QAAQ;QACfc,GAAG,YAAY;YACb,MAAMiB,OAAOC,kBAAS,CAACC,KAAK;YAC5B,MAAMK,cAAc;gBAClB,GAAGrC,QAAQ;gBACXE,OAAO;gBACPC,QAAQ;gBACRC,SAAS;gBACTE,WAAW,IAAIgC,OAAOC,WAAW;YACnC;YAEC3C,MAAoB4C,qBAAqB,CAAC;gBACzCC,IAAI;gBACJC,MAAM,UAAYL;YACpB;YAEAvB,IAAAA,cAAM,gBACJ,qBAACC,iBAAQ;gBACPC,MAAMhB;gBACNiB,WAAWV;gBACXW,UAAUV;;YAId,MAAMmB,aAAaP,cAAM,CAACG,cAAc,CAAC;YACzC,MAAMK,cAAcR,cAAM,CAACG,cAAc,CAAC;YAC1C,MAAMM,eAAeT,cAAM,CAACG,cAAc,CAAC;YAE3C,MAAMO,KAAKG,KAAK,CAACN;YACjB,MAAMG,KAAKI,IAAI,CAACP,YAAY;YAE5B,MAAMG,KAAKG,KAAK,CAACL;YACjB,MAAME,KAAKI,IAAI,CAACN,aAAa;YAE7B,MAAME,KAAKG,KAAK,CAACJ;YACjB,MAAMC,KAAKI,IAAI,CAACL,cAAc;YAE9B,MAAMc,aAAavB,cAAM,CAACK,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAK;YAC3DkB,iBAAS,CAACC,KAAK,CAACF;YAEhB,MAAMG,IAAAA,eAAO,EAAC;gBACZ3B,OAAOvB,OAAOmD,oBAAoB,CAAC,CAAC,WAAW,EAAE/C,SAASC,GAAG,EAAE,EAAE;oBAC/D+C,QAAQ;oBACRC,SAAS;wBACP,gBAAgB;oBAClB;oBACAC,MAAMC,KAAKC,SAAS,CAAC;wBACnBlD,OAAO;wBACPC,QAAQ;wBACRC,SAAS;oBACX;gBACF;YACF;YAEA,MAAM0C,IAAAA,eAAO,EAAC;gBACZ3B,OAAOZ,eAAe8C,gBAAgB;YACxC;QACF;QAEAxC,GAAG,kBAAkB;YACnB,MAAMiB,OAAOC,kBAAS,CAACC,KAAK;YAC5B,IAAIsB;YACJ,MAAMC,UAAU,IAAIC,QAAQ,CAACC;gBAC3BH,iBAAiBG;YACnB;YAEC7D,MAAoB8D,mBAAmB,CAACH;YAEzCzC,IAAAA,cAAM,gBACJ,qBAACC,iBAAQ;gBACPC,MAAMhB;gBACNiB,WAAWV;gBACXW,UAAUV;;YAId,MAAMmC,aAAavB,cAAM,CAACK,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAK;YAC3DkB,iBAAS,CAACC,KAAK,CAACF;YAEhB,MAAMG,IAAAA,eAAO,EAAC;gBACZ3B,OAAOwB,YAAYgB,YAAY;gBAC/BxC,OAAOC,cAAM,CAACC,SAAS,CAAC,WAAWC,iBAAiB;YACtD;YAEAgC,eAAgB;gBACdb,IAAI;gBACJC,MAAM,UAAY1C;YACpB;YAEA,MAAM8C,IAAAA,eAAO,EAAC;gBACZ3B,OAAOZ,eAAe8C,gBAAgB;YACxC;QACF;QAEAxC,GAAG,yBAAyB;YAC1B,MAAM+C,WAAW/D,KAAKgE,KAAK,CAACC,QAAQ,SAASC,kBAAkB;YAE9DnE,MAAoB4C,qBAAqB,CAAC;gBACzCC,IAAI;gBACJC,MAAM,UAAa,CAAA;wBAAEsB,OAAO;oBAAU,CAAA;YACxC;YAEAlD,IAAAA,cAAM,gBACJ,qBAACC,iBAAQ;gBACPC,MAAMhB;gBACNiB,WAAWV;gBACXW,UAAUV;;YAId,MAAMmC,aAAavB,cAAM,CAACK,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAK;YAC3DkB,iBAAS,CAACC,KAAK,CAACF;YAEhB,MAAMG,IAAAA,eAAO,EAAC;gBACZ3B,OAAOyC,UAAUb,oBAAoB,CAAC;gBACtC5B,OAAOZ,eAAe0D,GAAG,CAACZ,gBAAgB;YAC5C;QACF;QAEAxC,GAAG,iBAAiB;YAClB,MAAM+C,WAAW/D,KAAKgE,KAAK,CAACC,QAAQ,SAASC,kBAAkB;YAC/D,MAAMG,kBAAkBrE,KAAKgE,KAAK,CAACM,SAAS,SAASJ,kBAAkB;YAEtEnE,MAAoBwE,qBAAqB,CAAC,IAAIC,MAAM;YAErDvD,IAAAA,cAAM,gBACJ,qBAACC,iBAAQ;gBACPC,MAAMhB;gBACNiB,WAAWV;gBACXW,UAAUV;;YAId,MAAMmC,aAAavB,cAAM,CAACK,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAK;YAC3DkB,iBAAS,CAACC,KAAK,CAACF;YAEhB,MAAMG,IAAAA,eAAO,EAAC;gBACZ3B,OAAOyC,UAAUb,oBAAoB,CAAC;gBACtC5B,OAAO+C,iBAAiBnB,oBAAoB,CAAC,UAAU5B,OAAOmD,GAAG,CAACD;YACpE;QACF;IACF;IAEAtE,SAAS,WAAW;QAClBc,GAAG,0BAA0B;YAC3B,MAAMiB,OAAOC,kBAAS,CAACC,KAAK;YAE5BlB,IAAAA,cAAM,gBACJ,qBAACC,iBAAQ;gBACPC,MAAMhB;gBACNiB,WAAWV;gBACXW,UAAUV;;YAId,MAAM+D,eAAenD,cAAM,CAACK,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAQ;YAChE,MAAMI,KAAKe,KAAK,CAAC0B;YAEjBpD,OAAOX,cAAc6C,gBAAgB;YACrClC,OAAOvB,OAAOqE,GAAG,CAACZ,gBAAgB;QACpC;QAEAxC,GAAG,cAAc;YACf,MAAMiB,OAAOC,kBAAS,CAACC,KAAK;YAE5BlB,IAAAA,cAAM,gBACJ,qBAACC,iBAAQ;gBACPC,MAAMhB;gBACNiB,WAAWV;gBACXW,UAAUV;;YAId,MAAMmB,aAAaP,cAAM,CAACG,cAAc,CAAC;YACzC,MAAMO,KAAKG,KAAK,CAACN;YACjB,MAAMG,KAAKI,IAAI,CAACP,YAAY;YAE5B,MAAM4C,eAAenD,cAAM,CAACK,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAQ;YAChE,MAAMI,KAAKe,KAAK,CAAC0B;YAEjBpD,OAAOX,cAAc6C,gBAAgB;YACrC,cAAc;YACdlC,OAAOvB,OAAOqE,GAAG,CAACZ,gBAAgB;QACpC;IACF;IAEAtD,SAAS,WAAW;QAClBc,GAAG,qBAAqB;YACtB,MAAMiB,OAAOC,kBAAS,CAACC,KAAK;YAE5BlB,IAAAA,cAAM,gBACJ,qBAACC,iBAAQ;gBACPC,MAAMhB;gBACNiB,WAAWV;gBACXW,UAAUV;;YAId,MAAMmB,aAAaP,cAAM,CAACG,cAAc,CAAC;YACzC,MAAMO,KAAKG,KAAK,CAACN;YAEjB,MAAMgB,aAAavB,cAAM,CAACK,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAK;YAC3DP,OAAOwB,YAAYgB,YAAY;QACjC;QAEA9C,GAAG,uBAAuB;YACxB,MAAMiB,OAAOC,kBAAS,CAACC,KAAK;YAE5BlB,IAAAA,cAAM,gBACJ,qBAACC,iBAAQ;gBACPC,MAAMhB;gBACNiB,WAAWV;gBACXW,UAAUV;;YAId,MAAMmB,aAAaP,cAAM,CAACG,cAAc,CAAC;YACzC,MAAMO,KAAKG,KAAK,CAACN;YACjB,MAAMG,KAAKI,IAAI,CAACP,YAAY;YAE5B,MAAMgB,aAAavB,cAAM,CAACK,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAK;YAC3DP,OAAOwB,YAAYgB,YAAY;QACjC;QAEA9C,GAAG,mBAAmB;YACpB,MAAMiB,OAAOC,kBAAS,CAACC,KAAK;YAE5BlB,IAAAA,cAAM,gBACJ,qBAACC,iBAAQ;gBACPC,MAAMhB;gBACNiB,WAAWV;gBACXW,UAAUV;;YAId,MAAMqB,eAAeT,cAAM,CAACG,cAAc,CAAC;YAC3C,MAAMO,KAAKG,KAAK,CAACJ;YAEjB,yCAAyC;YACzC,MAAMC,KAAKI,IAAI,CAACL,cAAc,IAAI2C,MAAM,CAAC;YAEzC,MAAMC,cAAc,MAAM5C,aAAa6C,YAAY,CAAC;YACpDvD,OAAOsD,aAAaE,QAAQC,mBAAmB,CAAC;QAClD;IACF;IAEA7E,SAAS,YAAY;QACnBc,GAAG,0BAA0B;YAC3BC,IAAAA,cAAM,gBACJ,qBAACC,iBAAQ;gBACPC,MAAMhB;gBACNiB,WAAWV;gBACXW,UAAUV;;YAId,MAAMmB,aAAaP,cAAM,CAACG,cAAc,CAAC;YACzC,MAAMK,cAAcR,cAAM,CAACG,cAAc,CAAC;YAC1C,MAAMM,eAAeT,cAAM,CAACG,cAAc,CAAC;YAE3CJ,OAAOQ,YAAYkD,eAAe,CAAC;YACnC1D,OAAOS,aAAaiD,eAAe,CAAC;YACpC1D,OAAOU,cAAcgD,eAAe,CAAC;QACvC;QAEAhE,GAAG,qBAAqB;YACtB,IAAIyC;YACJ,MAAMC,UAAU,IAAIC,QAAQ,CAACC;gBAC3BH,iBAAiBG;YACnB;YAEC7D,MAAoB8D,mBAAmB,CAACH;YAEzCzC,IAAAA,cAAM,gBACJ,qBAACC,iBAAQ;gBACPC,MAAMhB;gBACNiB,WAAWV;gBACXW,UAAUV;;YAId,MAAMmC,aAAavB,cAAM,CAACK,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAK;YAC3DkB,iBAAS,CAACC,KAAK,CAACF;YAEhB,MAAMG,IAAAA,eAAO,EAAC;gBACZ3B,OAAOC,cAAM,CAACG,cAAc,CAAC,SAASoC,YAAY;gBAClDxC,OAAOC,cAAM,CAACG,cAAc,CAAC,SAASoC,YAAY;gBAClDxC,OAAOC,cAAM,CAACG,cAAc,CAAC,OAAOoC,YAAY;gBAChDxC,OAAOC,cAAM,CAACK,SAAS,CAAC,UAAU;oBAAEC,MAAM;gBAAQ,IAAIiC,YAAY;YACpE;YAEAL,eAAgB;gBACdb,IAAI;gBACJC,MAAM,UAAY1C;YACpB;QACF;IACF;AACF"}
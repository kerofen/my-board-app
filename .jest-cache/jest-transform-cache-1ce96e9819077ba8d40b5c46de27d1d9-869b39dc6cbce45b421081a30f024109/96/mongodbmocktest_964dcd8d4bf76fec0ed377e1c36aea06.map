{"version":3,"sources":["C:\\Users\\janne\\Documents\\workspace\\my-board-app\\__tests__\\lib\\mongodb-mock.test.ts"],"sourcesContent":["import { mockDb } from '@/lib/mongodb-mock';\n\ndescribe('MongoDB Mock', () => {\n  beforeEach(() => {\n    // テスト前にデータをリセット（モジュールリセットで実現）\n    jest.resetModules();\n  });\n\n  describe('find', () => {\n    it('投稿を作成日の降順で取得できる', async () => {\n      // 複数の投稿を作成\n      await mockDb.create({ title: '古い投稿', author: '作成者1', content: '内容1' });\n      await new Promise(resolve => setTimeout(resolve, 10)); // 時間差を作る\n      await mockDb.create({ title: '新しい投稿', author: '作成者2', content: '内容2' });\n      \n      const result = await mockDb.find();\n      \n      expect(result).toHaveLength(3); // デフォルトのサンプル投稿 + 2つ\n      expect(result[0].title).toBe('新しい投稿'); // 最新が最初\n    });\n  });\n\n  describe('findById', () => {\n    it('IDで投稿を取得できる', async () => {\n      const newPost = await mockDb.create({\n        title: 'テスト投稿',\n        author: '作成者',\n        content: '内容',\n      });\n      \n      const result = await mockDb.findById(newPost._id);\n      \n      expect(result).toEqual(newPost);\n    });\n\n    it('存在しないIDの場合undefinedを返す', async () => {\n      const result = await mockDb.findById('999');\n      expect(result).toBeUndefined();\n    });\n  });\n\n  describe('create', () => {\n    it('新規投稿を追加できる', async () => {\n      const newPost = {\n        title: '新規投稿',\n        author: '新規作成者',\n        content: '新規内容',\n      };\n      \n      const result = await mockDb.create(newPost);\n      \n      expect(result._id).toBeDefined();\n      expect(result.title).toBe(newPost.title);\n      expect(result.author).toBe(newPost.author);\n      expect(result.content).toBe(newPost.content);\n      expect(result.createdAt).toBeDefined();\n      expect(result.updatedAt).toBeDefined();\n      \n      // 作成した投稿が取得できることを確認\n      const found = await mockDb.findById(result._id);\n      expect(found).toEqual(result);\n    });\n  });\n\n  describe('findByIdAndUpdate', () => {\n    it('投稿を更新できる', async () => {\n      const originalPost = await mockDb.create({\n        title: '元のタイトル',\n        author: '元の作成者',\n        content: '元の内容',\n      });\n      \n      const updateData = {\n        title: '更新後のタイトル',\n        content: '更新後の内容',\n      };\n      \n      const result = await mockDb.findByIdAndUpdate(originalPost._id, updateData);\n      \n      expect(result).not.toBeNull();\n      expect(result?.title).toBe(updateData.title);\n      expect(result?.author).toBe(originalPost.author); // 変更されない\n      expect(result?.content).toBe(updateData.content);\n      expect(result?.createdAt).toBe(originalPost.createdAt); // 変更されない\n      expect(result?.updatedAt).not.toBe(originalPost.updatedAt); // 更新される\n    });\n\n    it('存在しないIDの場合nullを返す', async () => {\n      const result = await mockDb.findByIdAndUpdate('999', { title: '更新' });\n      expect(result).toBeNull();\n    });\n  });\n\n  describe('findByIdAndDelete', () => {\n    it('投稿を削除できる', async () => {\n      const testPost = await mockDb.create({\n        title: 'テスト投稿',\n        author: '作成者',\n        content: '内容',\n      });\n      \n      const result = await mockDb.findByIdAndDelete(testPost._id);\n      \n      expect(result).toEqual(testPost);\n      \n      // 削除後は取得できない\n      const found = await mockDb.findById(testPost._id);\n      expect(found).toBeUndefined();\n    });\n\n    it('存在しないIDの場合nullを返す', async () => {\n      const result = await mockDb.findByIdAndDelete('999');\n      expect(result).toBeNull();\n    });\n  });\n\n  describe('複数投稿の操作', () => {\n    it('複数の投稿を追加・取得できる', async () => {\n      await mockDb.create({ title: '投稿1', author: '作成者1', content: '内容1' });\n      await mockDb.create({ title: '投稿2', author: '作成者2', content: '内容2' });\n      await mockDb.create({ title: '投稿3', author: '作成者3', content: '内容3' });\n      \n      const posts = await mockDb.find();\n      \n      expect(posts.length).toBeGreaterThanOrEqual(3);\n      // 最新順で並んでいることを確認\n      const titles = posts.map(p => p.title);\n      expect(titles).toContain('投稿1');\n      expect(titles).toContain('投稿2');\n      expect(titles).toContain('投稿3');\n    });\n\n    it('特定の投稿のみ削除できる', async () => {\n      const post1 = await mockDb.create({ title: '削除テスト1', author: '作成者1', content: '内容1' });\n      const post2 = await mockDb.create({ title: '削除テスト2', author: '作成者2', content: '内容2' });\n      const post3 = await mockDb.create({ title: '削除テスト3', author: '作成者3', content: '内容3' });\n      \n      await mockDb.findByIdAndDelete(post2._id);\n      \n      const posts = await mockDb.find();\n      const titles = posts.map(p => p.title);\n      expect(titles).toContain('削除テスト1');\n      expect(titles).not.toContain('削除テスト2');\n      expect(titles).toContain('削除テスト3');\n    });\n  });\n});"],"names":["describe","beforeEach","jest","resetModules","it","mockDb","create","title","author","content","Promise","resolve","setTimeout","result","find","expect","toHaveLength","toBe","newPost","findById","_id","toEqual","toBeUndefined","toBeDefined","createdAt","updatedAt","found","originalPost","updateData","findByIdAndUpdate","not","toBeNull","testPost","findByIdAndDelete","posts","length","toBeGreaterThanOrEqual","titles","map","p","toContain","post1","post2","post3"],"mappings":"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"}
{"version":3,"sources":["C:\\Users\\janne\\Documents\\workspace\\my-board-app\\__tests__\\components\\PostForm.detailed.test.tsx"],"sourcesContent":["import { render, screen, fireEvent, waitFor } from '../../test-helpers/test-utils'\nimport userEvent from '@testing-library/user-event'\nimport PostForm from '@/components/PostForm'\nimport { boundaryTestData, specialCharacterData, whitespaceData } from '../../test-helpers/test-data'\n\n// fetchのモック\nglobal.fetch = jest.fn()\n\ndescribe('PostForm コンポーネント詳細テスト', () => {\n  const mockOnPostCreated = jest.fn()\n  let user: ReturnType<typeof userEvent.setup>\n\n  beforeEach(() => {\n    jest.clearAllMocks()\n    user = userEvent.setup()\n    // fetchのデフォルトモック\n    ;(fetch as jest.Mock).mockResolvedValue({\n      json: async () => ({ success: true, data: { _id: 'new-id' } }),\n    })\n  })\n\n  describe('レンダリングと初期状態', () => {\n    it('すべての必要な要素が表示される', () => {\n      render(<PostForm onPostCreated={mockOnPostCreated} />)\n      \n      // フォーム要素の存在確認\n      expect(screen.getByRole('heading', { name: '新規投稿' })).toBeInTheDocument()\n      expect(screen.getByLabelText('タイトル')).toBeInTheDocument()\n      expect(screen.getByLabelText('投稿者名')).toBeInTheDocument()\n      expect(screen.getByLabelText(/内容/)).toBeInTheDocument()\n      expect(screen.getByRole('button', { name: '投稿する' })).toBeInTheDocument()\n    })\n\n    it('初期状態ですべてのフィールドが空', () => {\n      render(<PostForm onPostCreated={mockOnPostCreated} />)\n      \n      expect(screen.getByLabelText('タイトル')).toHaveValue('')\n      expect(screen.getByLabelText('投稿者名')).toHaveValue('')\n      expect(screen.getByLabelText(/内容/)).toHaveValue('')\n    })\n\n    it('投稿ボタンは初期状態で有効', () => {\n      render(<PostForm onPostCreated={mockOnPostCreated} />)\n      \n      const submitButton = screen.getByRole('button', { name: '投稿する' })\n      expect(submitButton).not.toBeDisabled()\n    })\n  })\n\n  describe('フォーム入力と検証', () => {\n    it('正常な入力ができる', async () => {\n      render(<PostForm onPostCreated={mockOnPostCreated} />)\n      \n      await user.type(screen.getByLabelText('タイトル'), 'テストタイトル')\n      await user.type(screen.getByLabelText('投稿者名'), 'テストユーザー')\n      await user.type(screen.getByLabelText(/内容/), 'テスト内容')\n      \n      expect(screen.getByLabelText('タイトル')).toHaveValue('テストタイトル')\n      expect(screen.getByLabelText('投稿者名')).toHaveValue('テストユーザー')\n      expect(screen.getByLabelText(/内容/)).toHaveValue('テスト内容')\n    })\n\n    it('maxLength属性が正しく設定されている', () => {\n      render(<PostForm onPostCreated={mockOnPostCreated} />)\n      \n      expect(screen.getByLabelText('タイトル')).toHaveAttribute('maxLength', '100')\n      expect(screen.getByLabelText('投稿者名')).toHaveAttribute('maxLength', '50')\n      expect(screen.getByLabelText(/内容/)).toHaveAttribute('maxLength', '140')\n    })\n\n    it('空白のみの入力を拒否する', async () => {\n      const alertSpy = jest.spyOn(window, 'alert').mockImplementation()\n      render(<PostForm onPostCreated={mockOnPostCreated} />)\n      \n      await user.type(screen.getByLabelText('タイトル'), whitespaceData.spaces)\n      await user.type(screen.getByLabelText('投稿者名'), whitespaceData.tabs)\n      await user.type(screen.getByLabelText(/内容/), whitespaceData.mixed)\n      \n      fireEvent.click(screen.getByRole('button', { name: '投稿する' }))\n      \n      expect(alertSpy).toHaveBeenCalledWith('すべての項目を入力してください')\n      expect(fetch).not.toHaveBeenCalled()\n      \n      alertSpy.mockRestore()\n    })\n  })\n\n  describe('文字数カウンター機能', () => {\n    it('入力に応じて文字数が更新される', async () => {\n      render(<PostForm onPostCreated={mockOnPostCreated} />)\n      const contentInput = screen.getByLabelText(/内容/)\n      \n      // 10文字入力\n      await user.type(contentInput, '1234567890')\n      expect(screen.getByText('(10/140)')).toBeInTheDocument()\n      \n      // クリアして50文字入力\n      await user.clear(contentInput)\n      await user.type(contentInput, 'あ'.repeat(50))\n      expect(screen.getByText('(50/140)')).toBeInTheDocument()\n    })\n\n    it('140文字ちょうどの時は通常色で表示', async () => {\n      render(<PostForm onPostCreated={mockOnPostCreated} />)\n      \n      await user.type(screen.getByLabelText(/内容/), boundaryTestData.content.max)\n      \n      const counter = screen.getByText('(140/140)')\n      expect(counter).toBeInTheDocument()\n      expect(counter).toHaveClass('text-gray-500')\n    })\n\n    it('141文字以上の時は赤色で表示', async () => {\n      render(<PostForm onPostCreated={mockOnPostCreated} />)\n      \n      await user.type(screen.getByLabelText(/内容/), boundaryTestData.content.over)\n      \n      const counter = screen.getByText('(141/140)')\n      expect(counter).toBeInTheDocument()\n      expect(counter).toHaveClass('text-red-500')\n    })\n\n    it('文字数0の時はカウンターが表示されない', () => {\n      render(<PostForm onPostCreated={mockOnPostCreated} />)\n      \n      expect(screen.queryByText(/\\/140/)).not.toBeInTheDocument()\n    })\n  })\n\n  describe('境界値テスト', () => {\n    it('最小文字数（1文字）で投稿できる', async () => {\n      render(<PostForm onPostCreated={mockOnPostCreated} />)\n      \n      await user.type(screen.getByLabelText('タイトル'), boundaryTestData.title.min)\n      await user.type(screen.getByLabelText('投稿者名'), boundaryTestData.author.min)\n      await user.type(screen.getByLabelText(/内容/), boundaryTestData.content.min)\n      \n      fireEvent.click(screen.getByRole('button', { name: '投稿する' }))\n      \n      await waitFor(() => {\n        expect(fetch).toHaveBeenCalledWith('/api/posts', expect.objectContaining({\n          method: 'POST',\n          body: JSON.stringify({\n            title: boundaryTestData.title.min,\n            author: boundaryTestData.author.min,\n            content: boundaryTestData.content.min,\n          }),\n        }))\n      })\n    })\n\n    it('最大文字数で投稿できる', async () => {\n      render(<PostForm onPostCreated={mockOnPostCreated} />)\n      \n      await user.type(screen.getByLabelText('タイトル'), boundaryTestData.title.max)\n      await user.type(screen.getByLabelText('投稿者名'), boundaryTestData.author.max)\n      await user.type(screen.getByLabelText(/内容/), boundaryTestData.content.max)\n      \n      fireEvent.click(screen.getByRole('button', { name: '投稿する' }))\n      \n      await waitFor(() => {\n        expect(fetch).toHaveBeenCalled()\n        expect(mockOnPostCreated).toHaveBeenCalled()\n      })\n    })\n\n    it('内容が140文字を超える場合は投稿できない', async () => {\n      const alertSpy = jest.spyOn(window, 'alert').mockImplementation()\n      render(<PostForm onPostCreated={mockOnPostCreated} />)\n      \n      await user.type(screen.getByLabelText('タイトル'), 'タイトル')\n      await user.type(screen.getByLabelText('投稿者名'), '投稿者')\n      await user.type(screen.getByLabelText(/内容/), boundaryTestData.content.over)\n      \n      fireEvent.click(screen.getByRole('button', { name: '投稿する' }))\n      \n      expect(alertSpy).toHaveBeenCalledWith('投稿文は140文字以内で入力してください')\n      expect(fetch).not.toHaveBeenCalled()\n      \n      alertSpy.mockRestore()\n    })\n  })\n\n  describe('特殊文字の処理', () => {\n    it('特殊文字を含む投稿ができる', async () => {\n      render(<PostForm onPostCreated={mockOnPostCreated} />)\n      \n      await user.type(screen.getByLabelText('タイトル'), specialCharacterData.title)\n      await user.type(screen.getByLabelText('投稿者名'), specialCharacterData.author)\n      await user.type(screen.getByLabelText(/内容/), specialCharacterData.content)\n      \n      fireEvent.click(screen.getByRole('button', { name: '投稿する' }))\n      \n      await waitFor(() => {\n        expect(fetch).toHaveBeenCalledWith('/api/posts', expect.objectContaining({\n          body: JSON.stringify(specialCharacterData),\n        }))\n      })\n    })\n  })\n\n  describe('非同期処理とローディング状態', () => {\n    it('投稿中はローディング状態になる', async () => {\n      let resolvePromise: (value: any) => void\n      ;(fetch as jest.Mock).mockImplementation(() => \n        new Promise(resolve => { resolvePromise = resolve })\n      )\n      \n      render(<PostForm onPostCreated={mockOnPostCreated} />)\n      \n      await user.type(screen.getByLabelText('タイトル'), 'テスト')\n      await user.type(screen.getByLabelText('投稿者名'), 'ユーザー')\n      await user.type(screen.getByLabelText(/内容/), '内容')\n      \n      const submitButton = screen.getByRole('button', { name: '投稿する' })\n      fireEvent.click(submitButton)\n      \n      // ローディング状態の確認\n      expect(submitButton).toBeDisabled()\n      expect(screen.getByText('投稿中...')).toBeInTheDocument()\n      expect(screen.getByLabelText('タイトル')).toBeDisabled()\n      expect(screen.getByLabelText('投稿者名')).toBeDisabled()\n      expect(screen.getByLabelText(/内容/)).toBeDisabled()\n      \n      // 投稿完了\n      resolvePromise!({ json: async () => ({ success: true, data: { _id: '1' } }) })\n      \n      await waitFor(() => {\n        expect(submitButton).not.toBeDisabled()\n        expect(screen.getByText('投稿する')).toBeInTheDocument()\n      })\n    })\n\n    it('投稿成功後にフォームがリセットされる', async () => {\n      render(<PostForm onPostCreated={mockOnPostCreated} />)\n      \n      await user.type(screen.getByLabelText('タイトル'), 'テスト')\n      await user.type(screen.getByLabelText('投稿者名'), 'ユーザー')\n      await user.type(screen.getByLabelText(/内容/), '内容')\n      \n      fireEvent.click(screen.getByRole('button', { name: '投稿する' }))\n      \n      await waitFor(() => {\n        expect(screen.getByLabelText('タイトル')).toHaveValue('')\n        expect(screen.getByLabelText('投稿者名')).toHaveValue('')\n        expect(screen.getByLabelText(/内容/)).toHaveValue('')\n      })\n    })\n\n    it('投稿失敗時にエラーメッセージが表示される', async () => {\n      const alertSpy = jest.spyOn(window, 'alert').mockImplementation()\n      ;(fetch as jest.Mock).mockResolvedValueOnce({\n        json: async () => ({ success: false, error: 'サーバーエラー' }),\n      })\n      \n      render(<PostForm onPostCreated={mockOnPostCreated} />)\n      \n      await user.type(screen.getByLabelText('タイトル'), 'テスト')\n      await user.type(screen.getByLabelText('投稿者名'), 'ユーザー')\n      await user.type(screen.getByLabelText(/内容/), '内容')\n      \n      fireEvent.click(screen.getByRole('button', { name: '投稿する' }))\n      \n      await waitFor(() => {\n        expect(alertSpy).toHaveBeenCalledWith('投稿の作成に失敗しました')\n      })\n      \n      // フォームはリセットされない\n      expect(screen.getByLabelText('タイトル')).toHaveValue('テスト')\n      \n      alertSpy.mockRestore()\n    })\n\n    it('ネットワークエラー時に適切に処理される', async () => {\n      const alertSpy = jest.spyOn(window, 'alert').mockImplementation()\n      const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation()\n      ;(fetch as jest.Mock).mockRejectedValueOnce(new Error('Network error'))\n      \n      render(<PostForm onPostCreated={mockOnPostCreated} />)\n      \n      await user.type(screen.getByLabelText('タイトル'), 'テスト')\n      await user.type(screen.getByLabelText('投稿者名'), 'ユーザー')\n      await user.type(screen.getByLabelText(/内容/), '内容')\n      \n      fireEvent.click(screen.getByRole('button', { name: '投稿する' }))\n      \n      await waitFor(() => {\n        expect(alertSpy).toHaveBeenCalledWith('投稿の作成に失敗しました')\n        expect(consoleErrorSpy).toHaveBeenCalledWith('エラー:', expect.any(Error))\n      })\n      \n      alertSpy.mockRestore()\n      consoleErrorSpy.mockRestore()\n    })\n  })\n\n  describe('コールバック関数', () => {\n    it('投稿成功時にonPostCreatedが呼ばれる', async () => {\n      render(<PostForm onPostCreated={mockOnPostCreated} />)\n      \n      await user.type(screen.getByLabelText('タイトル'), 'テスト')\n      await user.type(screen.getByLabelText('投稿者名'), 'ユーザー')\n      await user.type(screen.getByLabelText(/内容/), '内容')\n      \n      fireEvent.click(screen.getByRole('button', { name: '投稿する' }))\n      \n      await waitFor(() => {\n        expect(mockOnPostCreated).toHaveBeenCalledTimes(1)\n      })\n    })\n\n    it('投稿失敗時にonPostCreatedが呼ばれない', async () => {\n      jest.spyOn(window, 'alert').mockImplementation()\n      ;(fetch as jest.Mock).mockResolvedValueOnce({\n        json: async () => ({ success: false }),\n      })\n      \n      render(<PostForm onPostCreated={mockOnPostCreated} />)\n      \n      await user.type(screen.getByLabelText('タイトル'), 'テスト')\n      await user.type(screen.getByLabelText('投稿者名'), 'ユーザー')\n      await user.type(screen.getByLabelText(/内容/), '内容')\n      \n      fireEvent.click(screen.getByRole('button', { name: '投稿する' }))\n      \n      await waitFor(() => {\n        expect(fetch).toHaveBeenCalled()\n      })\n      \n      expect(mockOnPostCreated).not.toHaveBeenCalled()\n    })\n  })\n\n  describe('アクセシビリティ', () => {\n    it('フォーム要素に適切なラベルが付いている', () => {\n      render(<PostForm onPostCreated={mockOnPostCreated} />)\n      \n      expect(screen.getByLabelText('タイトル')).toHaveAttribute('id', 'title')\n      expect(screen.getByLabelText('投稿者名')).toHaveAttribute('id', 'author')\n      expect(screen.getByLabelText(/内容/)).toHaveAttribute('id', 'content')\n    })\n\n    it('キーボード操作でフォームを送信できる', async () => {\n      render(<PostForm onPostCreated={mockOnPostCreated} />)\n      \n      const titleInput = screen.getByLabelText('タイトル')\n      await user.type(titleInput, 'テスト')\n      await user.tab()\n      \n      const authorInput = screen.getByLabelText('投稿者名')\n      await user.type(authorInput, 'ユーザー')\n      await user.tab()\n      \n      const contentInput = screen.getByLabelText(/内容/)\n      await user.type(contentInput, '内容')\n      \n      // Enterキーでフォーム送信\n      await user.keyboard('{Enter}')\n      \n      await waitFor(() => {\n        expect(fetch).toHaveBeenCalled()\n      })\n    })\n  })\n})"],"names":["global","fetch","jest","fn","describe","mockOnPostCreated","user","beforeEach","clearAllMocks","userEvent","setup","mockResolvedValue","json","success","data","_id","it","render","PostForm","onPostCreated","expect","screen","getByRole","name","toBeInTheDocument","getByLabelText","toHaveValue","submitButton","not","toBeDisabled","type","toHaveAttribute","alertSpy","spyOn","window","mockImplementation","whitespaceData","spaces","tabs","mixed","fireEvent","click","toHaveBeenCalledWith","toHaveBeenCalled","mockRestore","contentInput","getByText","clear","repeat","boundaryTestData","content","max","counter","toHaveClass","over","queryByText","title","min","author","waitFor","objectContaining","method","body","JSON","stringify","specialCharacterData","resolvePromise","Promise","resolve","mockResolvedValueOnce","error","consoleErrorSpy","console","mockRejectedValueOnce","Error","any","toHaveBeenCalledTimes","titleInput","tab","authorInput","keyboard"],"mappings":"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"}
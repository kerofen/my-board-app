5e3fed326737b7bb121603232395e697
"use strict";
// モジュールのモック
jest.mock('@/lib/mongodb');
jest.mock('@/models/Post');
jest.mock('@/lib/mongodb-mock');
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _route = require("../../app/api/posts/route");
const _route1 = require("../../app/api/posts/[id]/route");
const _server = require("next/server");
const _mongodb = /*#__PURE__*/ _interop_require_default(require("../../lib/mongodb"));
const _Post = /*#__PURE__*/ _interop_require_default(require("../../models/Post"));
const _mongodbmock = /*#__PURE__*/ _interop_require_wildcard(require("../../lib/mongodb-mock"));
const _testdata = require("../../test-helpers/test-data");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
describe('CRUD API 詳細テスト', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        _mongodb.default.mockResolvedValue(undefined);
    });
    describe('POST /api/posts - 投稿作成', ()=>{
        describe('正常系', ()=>{
            it('有効なデータで投稿を作成できる', async ()=>{
                const newPost = (0, _testdata.createMockPost)();
                _Post.default.create.mockResolvedValueOnce(newPost);
                const request = new _server.NextRequest('http://localhost:3000/api/posts', {
                    method: 'POST',
                    body: JSON.stringify({
                        title: newPost.title,
                        author: newPost.author,
                        content: newPost.content
                    })
                });
                const response = await (0, _route.POST)(request);
                const data = await response.json();
                expect(response.status).toBe(201);
                expect(data).toEqual({
                    success: true,
                    data: newPost
                });
                expect(_Post.default.create).toHaveBeenCalledWith({
                    title: newPost.title,
                    author: newPost.author,
                    content: newPost.content
                });
            });
            it('最小文字数で投稿を作成できる', async ()=>{
                const minPost = (0, _testdata.createMockPost)({
                    title: _testdata.boundaryTestData.title.min,
                    author: _testdata.boundaryTestData.author.min,
                    content: _testdata.boundaryTestData.content.min
                });
                _Post.default.create.mockResolvedValueOnce(minPost);
                const request = new _server.NextRequest('http://localhost:3000/api/posts', {
                    method: 'POST',
                    body: JSON.stringify({
                        title: _testdata.boundaryTestData.title.min,
                        author: _testdata.boundaryTestData.author.min,
                        content: _testdata.boundaryTestData.content.min
                    })
                });
                const response = await (0, _route.POST)(request);
                expect(response.status).toBe(201);
            });
            it('最大文字数で投稿を作成できる', async ()=>{
                const maxPost = (0, _testdata.createMockPost)({
                    title: _testdata.boundaryTestData.title.max,
                    author: _testdata.boundaryTestData.author.max,
                    content: _testdata.boundaryTestData.content.max
                });
                _Post.default.create.mockResolvedValueOnce(maxPost);
                const request = new _server.NextRequest('http://localhost:3000/api/posts', {
                    method: 'POST',
                    body: JSON.stringify({
                        title: _testdata.boundaryTestData.title.max,
                        author: _testdata.boundaryTestData.author.max,
                        content: _testdata.boundaryTestData.content.max
                    })
                });
                const response = await (0, _route.POST)(request);
                expect(response.status).toBe(201);
            });
            it('特殊文字を含む投稿を作成できる', async ()=>{
                const specialPost = (0, _testdata.createMockPost)(_testdata.specialCharacterData);
                _Post.default.create.mockResolvedValueOnce(specialPost);
                const request = new _server.NextRequest('http://localhost:3000/api/posts', {
                    method: 'POST',
                    body: JSON.stringify(_testdata.specialCharacterData)
                });
                const response = await (0, _route.POST)(request);
                const data = await response.json();
                expect(response.status).toBe(201);
                expect(data.success).toBe(true);
            });
        });
        describe('異常系', ()=>{
            it('タイトルが欠落している場合400エラー', async ()=>{
                ;
                _Post.default.create.mockRejectedValueOnce({
                    name: 'ValidationError',
                    message: 'タイトルは必須です'
                });
                const request = new _server.NextRequest('http://localhost:3000/api/posts', {
                    method: 'POST',
                    body: JSON.stringify({
                        author: 'テストユーザー',
                        content: 'テスト内容'
                    })
                });
                const response = await (0, _route.POST)(request);
                const data = await response.json();
                expect(response.status).toBe(400);
                expect(data.success).toBe(false);
                expect(data.error).toContain('タイトルは必須です');
            });
            it('文字数制限を超える場合400エラー', async ()=>{
                ;
                _Post.default.create.mockRejectedValueOnce({
                    name: 'ValidationError',
                    message: '内容は140文字以内で入力してください'
                });
                const request = new _server.NextRequest('http://localhost:3000/api/posts', {
                    method: 'POST',
                    body: JSON.stringify({
                        title: 'テスト',
                        author: 'テストユーザー',
                        content: _testdata.boundaryTestData.content.over
                    })
                });
                const response = await (0, _route.POST)(request);
                const data = await response.json();
                expect(response.status).toBe(400);
                expect(data.error).toContain('140文字以内');
            });
            it('不正なJSONの場合500エラー', async ()=>{
                const request = new _server.NextRequest('http://localhost:3000/api/posts', {
                    method: 'POST',
                    body: 'invalid json'
                });
                const response = await (0, _route.POST)(request);
                const data = await response.json();
                expect(response.status).toBe(500);
                expect(data.success).toBe(false);
            });
        });
        describe('フォールバック処理', ()=>{
            it('MongoDB接続失敗時はモックDBを使用', async ()=>{
                ;
                _mongodb.default.mockRejectedValueOnce(new Error('接続失敗'));
                const mockPost = (0, _testdata.createMockPost)({
                    _id: 'mock_1'
                });
                _mongodbmock.create.mockReturnValueOnce(mockPost);
                const request = new _server.NextRequest('http://localhost:3000/api/posts', {
                    method: 'POST',
                    body: JSON.stringify({
                        title: 'テスト',
                        author: 'ユーザー',
                        content: '内容'
                    })
                });
                const response = await (0, _route.POST)(request);
                const data = await response.json();
                expect(response.status).toBe(201);
                expect(data.success).toBe(true);
                expect(data.mock).toBe(true);
                expect(data.data).toEqual(mockPost);
            });
        });
    });
    describe('GET /api/posts - 投稿一覧取得', ()=>{
        describe('正常系', ()=>{
            it('投稿一覧を取得できる', async ()=>{
                const mockPosts = (0, _testdata.createMockPosts)(5);
                _Post.default.find.mockReturnValue({
                    sort: jest.fn().mockResolvedValueOnce(mockPosts)
                });
                const response = await (0, _route.GET)();
                const data = await response.json();
                expect(response.status).toBe(200);
                expect(data.success).toBe(true);
                expect(data.data).toHaveLength(5);
                expect(data.data).toEqual(mockPosts);
                expect(_Post.default.find).toHaveBeenCalled();
            });
            it('投稿が0件の場合空配列を返す', async ()=>{
                ;
                _Post.default.find.mockReturnValue({
                    sort: jest.fn().mockResolvedValueOnce([])
                });
                const response = await (0, _route.GET)();
                const data = await response.json();
                expect(response.status).toBe(200);
                expect(data.success).toBe(true);
                expect(data.data).toEqual([]);
            });
            it('投稿が作成日時の降順でソートされる', async ()=>{
                const sortMock = jest.fn().mockResolvedValueOnce([]);
                _Post.default.find.mockReturnValue({
                    sort: sortMock
                });
                await (0, _route.GET)();
                expect(sortMock).toHaveBeenCalledWith({
                    createdAt: -1
                });
            });
        });
        describe('異常系', ()=>{
            it('データベースエラー時は500エラー', async ()=>{
                ;
                _Post.default.find.mockReturnValue({
                    sort: jest.fn().mockRejectedValueOnce(new Error('DB Error'))
                });
                const response = await (0, _route.GET)();
                const data = await response.json();
                expect(response.status).toBe(500);
                expect(data.success).toBe(false);
                expect(data.error).toBe('投稿の取得に失敗しました');
            });
        });
        describe('フォールバック処理', ()=>{
            it('MongoDB接続失敗時はモックDBを使用', async ()=>{
                ;
                _mongodb.default.mockRejectedValueOnce(new Error('接続失敗'));
                const mockPosts = (0, _testdata.createMockPosts)(3);
                _mongodbmock.find.mockReturnValueOnce(mockPosts);
                const response = await (0, _route.GET)();
                const data = await response.json();
                expect(response.status).toBe(200);
                expect(data.success).toBe(true);
                expect(data.mock).toBe(true);
                expect(data.warning).toContain('オフラインモード');
                expect(data.data).toEqual(mockPosts);
            });
        });
    });
    describe('GET /api/posts/[id] - 個別投稿取得', ()=>{
        const mockRequest = new _server.NextRequest('http://localhost:3000/api/posts/123');
        const mockParams = {
            params: Promise.resolve({
                id: '123'
            })
        };
        describe('正常系', ()=>{
            it('指定IDの投稿を取得できる', async ()=>{
                const mockPost = (0, _testdata.createMockPost)({
                    _id: '123'
                });
                _Post.default.findById.mockResolvedValueOnce(mockPost);
                const response = await (0, _route1.GET)(mockRequest, mockParams);
                const data = await response.json();
                expect(response.status).toBe(200);
                expect(data.success).toBe(true);
                expect(data.data).toEqual(mockPost);
                expect(_Post.default.findById).toHaveBeenCalledWith('123');
            });
        });
        describe('異常系', ()=>{
            it('投稿が見つからない場合404エラー', async ()=>{
                ;
                _Post.default.findById.mockResolvedValueOnce(null);
                const response = await (0, _route1.GET)(mockRequest, mockParams);
                const data = await response.json();
                expect(response.status).toBe(404);
                expect(data.success).toBe(false);
                expect(data.error).toBe('投稿が見つかりません');
            });
            it('データベースエラー時は500エラー', async ()=>{
                ;
                _Post.default.findById.mockRejectedValueOnce(new Error('DB Error'));
                const response = await (0, _route1.GET)(mockRequest, mockParams);
                const data = await response.json();
                expect(response.status).toBe(500);
                expect(data.success).toBe(false);
            });
        });
    });
    describe('PUT /api/posts/[id] - 投稿更新', ()=>{
        const mockParams = {
            params: Promise.resolve({
                id: '123'
            })
        };
        describe('正常系', ()=>{
            it('投稿を更新できる', async ()=>{
                const updatedPost = (0, _testdata.createMockPost)({
                    _id: '123',
                    title: '更新後のタイトル'
                });
                _Post.default.findByIdAndUpdate.mockResolvedValueOnce(updatedPost);
                const request = new _server.NextRequest('http://localhost:3000/api/posts/123', {
                    method: 'PUT',
                    body: JSON.stringify({
                        title: '更新後のタイトル',
                        author: '更新後の投稿者',
                        content: '更新後の内容'
                    })
                });
                const response = await (0, _route1.PUT)(request, mockParams);
                const data = await response.json();
                expect(response.status).toBe(200);
                expect(data.success).toBe(true);
                expect(data.data).toEqual(updatedPost);
                expect(_Post.default.findByIdAndUpdate).toHaveBeenCalledWith('123', expect.objectContaining({
                    title: '更新後のタイトル',
                    author: '更新後の投稿者',
                    content: '更新後の内容'
                }), {
                    new: true,
                    runValidators: true
                });
            });
            it('部分更新ができる', async ()=>{
                const updatedPost = (0, _testdata.createMockPost)({
                    _id: '123'
                });
                _Post.default.findByIdAndUpdate.mockResolvedValueOnce(updatedPost);
                const request = new _server.NextRequest('http://localhost:3000/api/posts/123', {
                    method: 'PUT',
                    body: JSON.stringify({
                        title: '新しいタイトルのみ',
                        author: '既存の投稿者',
                        content: '既存の内容'
                    })
                });
                const response = await (0, _route1.PUT)(request, mockParams);
                expect(response.status).toBe(200);
            });
        });
        describe('異常系', ()=>{
            it('投稿が見つからない場合404エラー', async ()=>{
                ;
                _Post.default.findByIdAndUpdate.mockResolvedValueOnce(null);
                const request = new _server.NextRequest('http://localhost:3000/api/posts/123', {
                    method: 'PUT',
                    body: JSON.stringify({
                        title: '更新',
                        author: '更新',
                        content: '更新'
                    })
                });
                const response = await (0, _route1.PUT)(request, mockParams);
                const data = await response.json();
                expect(response.status).toBe(404);
                expect(data.error).toBe('投稿が見つかりません');
            });
            it('バリデーションエラー時は400エラー', async ()=>{
                ;
                _Post.default.findByIdAndUpdate.mockRejectedValueOnce({
                    name: 'ValidationError',
                    message: '内容は140文字以内で入力してください'
                });
                const request = new _server.NextRequest('http://localhost:3000/api/posts/123', {
                    method: 'PUT',
                    body: JSON.stringify({
                        title: 'タイトル',
                        author: '投稿者',
                        content: _testdata.boundaryTestData.content.over
                    })
                });
                const response = await (0, _route1.PUT)(request, mockParams);
                const data = await response.json();
                expect(response.status).toBe(400);
                expect(data.error).toContain('140文字以内');
            });
        });
    });
    describe('DELETE /api/posts/[id] - 投稿削除', ()=>{
        const mockParams = {
            params: Promise.resolve({
                id: '123'
            })
        };
        const mockRequest = new _server.NextRequest('http://localhost:3000/api/posts/123');
        describe('正常系', ()=>{
            it('投稿を削除できる', async ()=>{
                const deletedPost = (0, _testdata.createMockPost)({
                    _id: '123'
                });
                _Post.default.findByIdAndDelete.mockResolvedValueOnce(deletedPost);
                const response = await (0, _route1.DELETE)(mockRequest, mockParams);
                const data = await response.json();
                expect(response.status).toBe(200);
                expect(data.success).toBe(true);
                expect(data.data).toBe(null);
                expect(_Post.default.findByIdAndDelete).toHaveBeenCalledWith('123');
            });
        });
        describe('異常系', ()=>{
            it('投稿が見つからない場合404エラー', async ()=>{
                ;
                _Post.default.findByIdAndDelete.mockResolvedValueOnce(null);
                const response = await (0, _route1.DELETE)(mockRequest, mockParams);
                const data = await response.json();
                expect(response.status).toBe(404);
                expect(data.success).toBe(false);
                expect(data.error).toBe('投稿が見つかりません');
            });
            it('データベースエラー時は500エラー', async ()=>{
                ;
                _Post.default.findByIdAndDelete.mockRejectedValueOnce(new Error('DB Error'));
                const response = await (0, _route1.DELETE)(mockRequest, mockParams);
                const data = await response.json();
                expect(response.status).toBe(500);
                expect(data.success).toBe(false);
                expect(data.error).toBe('投稿の削除に失敗しました');
            });
        });
        describe('フォールバック処理', ()=>{
            it('MongoDB接続失敗時はモックDBを使用', async ()=>{
                ;
                _mongodb.default.mockRejectedValueOnce(new Error('接続失敗'));
                const deletedPost = (0, _testdata.createMockPost)({
                    _id: 'mock_123'
                });
                _mongodbmock.findByIdAndDelete.mockReturnValueOnce(deletedPost);
                const response = await (0, _route1.DELETE)(mockRequest, mockParams);
                const data = await response.json();
                expect(response.status).toBe(200);
                expect(data.success).toBe(true);
                expect(data.mock).toBe(true);
            });
        });
    });
    describe('エラーハンドリング共通処理', ()=>{
        it('予期しないエラーが発生した場合500エラー', async ()=>{
            ;
            _Post.default.find.mockImplementation(()=>{
                throw new Error('Unexpected error');
            });
            const response = await (0, _route.GET)();
            const data = await response.json();
            expect(response.status).toBe(500);
            expect(data.success).toBe(false);
        });
        it('開発環境ではエラー詳細が含まれる', async ()=>{
            const originalEnv = process.env.NODE_ENV;
            process.env.NODE_ENV = 'development';
            _Post.default.find.mockImplementation(()=>{
                throw new Error('Detailed error message');
            });
            const response = await (0, _route.GET)();
            const data = await response.json();
            expect(data.error).toContain('Detailed error message');
            process.env.NODE_ENV = originalEnv;
        });
    });
});

//# sourceMappingURL=data:application/json;base64,
name: E2E Tests (PR)

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - '**.js'
      - '**.jsx'
      - '**.ts'
      - '**.tsx'
      - '**.json'
      - 'package*.json'
      - '.github/workflows/e2e-pr.yml'

concurrency:
  group: e2e-pr-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      backend: ${{ steps.filter.outputs.backend }}
      e2e: ${{ steps.filter.outputs.e2e }}
    
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            frontend:
              - 'app/**'
              - 'components/**'
              - 'public/**'
              - '*.css'
            backend:
              - 'app/api/**'
              - 'lib/**'
              - 'models/**'
            e2e:
              - 'e2e/**'
              - 'playwright.config.ts'

  quick-e2e:
    name: Quick E2E Test (Chromium only)
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true' || needs.changes.outputs.e2e == 'true'
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🗄️ Start MongoDB (in-memory)
        run: |
          npm install -g mongodb-memory-server
          npx mongodb-memory-server &
          sleep 5

      - name: 📦 Install dependencies
        run: |
          npm ci --prefer-offline --no-audit

      - name: 🎭 Install Playwright (Chromium only)
        run: npx playwright install chromium --with-deps

      - name: 🚀 Start dev server
        run: |
          npm run dev &
          npx wait-on http://localhost:3000 -t 30000
        env:
          MONGODB_URI: mongodb://127.0.0.1:27017/test

      - name: 🧪 Run smoke tests
        run: |
          npx playwright test --project=chromium --grep @smoke --reporter=list
        env:
          MONGODB_URI: mongodb://127.0.0.1:27017/test
          CI: true

      - name: 🧪 Run critical path tests
        if: success()
        run: |
          npx playwright test crud-with-testid.spec.ts --project=chromium --reporter=list
        env:
          MONGODB_URI: mongodb://127.0.0.1:27017/test
          CI: true

      - name: 📊 Generate report
        if: always()
        run: |
          npx playwright show-report --host 0.0.0.0 --port 9323 || true

      - name: 📸 Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: quick-test-results-${{ github.run_id }}
          path: |
            playwright-report/
            test-results/
          retention-days: 3

      - name: 💬 PR Comment
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const fs = require('fs');
            const testResults = {
              passed: 0,
              failed: 0,
              skipped: 0,
              duration: 0
            };
            
            // Parse test results if available
            try {
              if (fs.existsSync('test-results/results.json')) {
                const results = JSON.parse(fs.readFileSync('test-results/results.json', 'utf8'));
                testResults.passed = results.stats?.passed || 0;
                testResults.failed = results.stats?.failed || 0;
                testResults.skipped = results.stats?.skipped || 0;
                testResults.duration = results.stats?.duration || 0;
              }
            } catch (e) {
              console.log('Could not parse test results:', e);
            }
            
            const status = '${{ job.status }}';
            const emoji = status === 'success' ? '✅' : '❌';
            const statusText = status === 'success' ? 'Passed' : 'Failed';
            
            const comment = `## ${emoji} E2E Test Results (Quick)
            
            **Status:** ${statusText}
            **Browser:** Chromium
            **Duration:** ${Math.round(testResults.duration / 1000)}s
            
            ### Test Summary
            - ✅ Passed: ${testResults.passed}
            - ❌ Failed: ${testResults.failed}
            - ⏭️ Skipped: ${testResults.skipped}
            
            ${status !== 'success' ? '### ⚠️ Action Required\nPlease review the failing tests and fix any issues before merging.' : '### ✨ All tests passed!\nYour changes look good to go.'}
            
            <details>
            <summary>View Details</summary>
            
            - Workflow: [${context.workflow}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            - Commit: ${context.sha.substring(0, 7)}
            ${status !== 'success' ? '- [Download test artifacts](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})' : ''}
            
            </details>`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('E2E Test Results (Quick)')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

  lint-and-type:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔍 Run ESLint
        run: npm run lint

      - name: 📝 Run TypeScript check
        run: npx tsc --noEmit

  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🔐 Run npm audit
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: 🔍 Run security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '0'
          severity: 'CRITICAL,HIGH'